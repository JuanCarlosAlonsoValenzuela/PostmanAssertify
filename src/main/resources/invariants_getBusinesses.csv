pptname;invariant;invariantType;variables;postmanAssertion;tp
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.categories[..]) >= 1;1
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.price[..]) >= 1;1
/businesses/search&getBusinesses&200&businesses&categories():::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));warning: method daikon.inv.unary.scalar.OneOfScalar.format(OutputFormat:Postman) needs to be implemented: size(input.attributes[..]) one of { 1, 2, 3 };1
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.categories[..]) >= 1;1
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.price[..]) >= 1;1
/businesses/search&getBusinesses&200&businesses&categories():::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));warning: method daikon.inv.unary.scalar.OneOfScalar.format(OutputFormat:Postman) needs to be implemented: size(input.attributes[..]) one of { 1, 2, 3 };1
/businesses/search&getBusinesses&200&businesses():::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.categories[..]) >= 1;1
/businesses/search&getBusinesses&200&businesses():::ENTER;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.price[..]) >= 1;1
/businesses/search&getBusinesses&200&businesses():::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));warning: method daikon.inv.unary.scalar.OneOfScalar.format(OutputFormat:Postman) needs to be implemented: size(input.attributes[..]) one of { 1, 2, 3 };1
/businesses/search&getBusinesses&200&businesses():::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);pm.expect(return_id).to.have.length(22);1
/businesses/search&getBusinesses&200&businesses():::EXIT;return.rating >= 1.0;daikon.inv.unary.scalar.LowerBoundFloat;(return.rating);warning: method daikon.inv.unary.scalar.LowerBoundFloat.format(OutputFormat:Postman) needs to be implemented: return.rating >= 1.0;1
/businesses/search&getBusinesses&200&businesses():::EXIT;return.review_count >= 1;daikon.inv.unary.scalar.LowerBound;(return.review_count);warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: return.review_count >= 1;1
/businesses/search&getBusinesses&200&businesses():::EXIT;return.url is Url;daikon.inv.unary.string.IsUrl;(return.url);pm.expect(return_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w0-9]+-?)*[\w0-9]+)(?:\.(?:[\w0-9]+-)*[\w0-9]+)*(?:\.(?:[a-zA-Z0-9]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/);1
/businesses/search&getBusinesses&200&businesses():::EXIT;return.transactions[] elements one of { "delivery", "pickup", "restaurant_reservation" };daikon.inv.unary.stringsequence.EltOneOfString;(return.transactions[..]);warning: method daikon.inv.unary.stringsequence.EltOneOfString.format(OutputFormat:Postman) needs to be implemented: return.transactions[..] elements one of { "delivery", "pickup", "restaurant_reservation" };1
/businesses/search&getBusinesses&200&businesses():::EXIT;LENGTH(return.location.country)==2;daikon.inv.unary.string.FixedLengthString;(return.location.country);pm.expect(return_location_country).to.have.length(2);1
/businesses/search&getBusinesses&200&businesses():::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.categories[..]) >= 1;1
/businesses/search&getBusinesses&200&businesses():::EXIT;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.price[..]) >= 1;1
/businesses/search&getBusinesses&200&businesses():::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));warning: method daikon.inv.unary.scalar.OneOfScalar.format(OutputFormat:Postman) needs to be implemented: size(input.attributes[..]) one of { 1, 2, 3 };1
/businesses/search&getBusinesses&200&businesses():::EXIT;size(return.location.display_address[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.location.display_address[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(return.location.display_address[..]) >= 1;1
/businesses/search&getBusinesses&200():::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.categories[..]) >= 1;1
/businesses/search&getBusinesses&200():::ENTER;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.price[..]) >= 1;1
/businesses/search&getBusinesses&200():::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));warning: method daikon.inv.unary.scalar.OneOfScalar.format(OutputFormat:Postman) needs to be implemented: size(input.attributes[..]) one of { 1, 2, 3 };1
/businesses/search&getBusinesses&200():::EXIT;return.total >= 0;daikon.inv.unary.scalar.LowerBound;(return.total);warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: return.total >= 0;1
/businesses/search&getBusinesses&200():::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.categories[..]) >= 1;1
/businesses/search&getBusinesses&200():::EXIT;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]));warning: method daikon.inv.unary.scalar.LowerBound.format(OutputFormat:Postman) needs to be implemented: size(input.price[..]) >= 1;1
/businesses/search&getBusinesses&200():::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));warning: method daikon.inv.unary.scalar.OneOfScalar.format(OutputFormat:Postman) needs to be implemented: size(input.attributes[..]) one of { 1, 2, 3 };1
/businesses/search&getBusinesses&200():::EXIT;input.limit >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.businesses[..]));warning: method daikon.inv.binary.twoScalar.IntGreaterEqual.format(OutputFormat:Postman) needs to be implemented: input.limit >= size(return.businesses[..]);1
/businesses/search&getBusinesses&200():::EXIT;return.total >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.businesses[..]));warning: method daikon.inv.binary.twoScalar.IntGreaterEqual.format(OutputFormat:Postman) needs to be implemented: return.total >= size(return.businesses[..]);1
