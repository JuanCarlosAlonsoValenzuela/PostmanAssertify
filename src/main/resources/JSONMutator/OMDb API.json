{
  "info": {
    "name": "OMDb API",
    "description": "This API requires authorization, you can get a free key here: [http://omdbapi.com/apikey.aspx](http://omdbapi.com/apikey.aspx)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Original",
      "item": [
        {
          "name": "Original_Test0001",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Getting value of the t query parameter \r",
                  "input_t \u003d pm.request.url.query.get(\"t\");\r",
                  "if (input_t !\u003d null) { \r",
                  "input_t \u003d decodeURIComponent(input_t);\r",
                  "}\r",
                  "// Printing value of input_t variable\r",
                  "console.log(\"Printing value of input_t\");\r",
                  "console.log(input_t);\r",
                  "\r",
                  "// Getting value of the i query parameter \r",
                  "input_i \u003d pm.request.url.query.get(\"i\");\r",
                  "if (input_i !\u003d null) { \r",
                  "input_i \u003d decodeURIComponent(input_i);\r",
                  "}\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "// Getting value of the type query parameter \r",
                  "input_type \u003d pm.request.url.query.get(\"type\");\r",
                  "if (input_type !\u003d null) { \r",
                  "input_type \u003d decodeURIComponent(input_type);\r",
                  "}\r",
                  "// Printing value of input_type variable\r",
                  "console.log(\"Printing value of input_type\");\r",
                  "console.log(input_type);\r",
                  "\r",
                  "// Getting value of the y query parameter \r",
                  "input_y \u003d pm.request.url.query.get(\"y\");\r",
                  "if (input_y !\u003d null) { \r",
                  "input_y \u003d decodeURIComponent(input_y);\r",
                  "input_y \u003d parseInt(input_y);\r",
                  "}\r",
                  "// Printing value of input_y variable\r",
                  "console.log(\"Printing value of input_y\");\r",
                  "console.log(input_y);\r",
                  "\r",
                  "// Getting value of the plot query parameter \r",
                  "input_plot \u003d pm.request.url.query.get(\"plot\");\r",
                  "if (input_plot !\u003d null) { \r",
                  "input_plot \u003d decodeURIComponent(input_plot);\r",
                  "}\r",
                  "// Printing value of input_plot variable\r",
                  "console.log(\"Printing value of input_plot\");\r",
                  "console.log(input_plot);\r",
                  "\r",
                  "// Getting value of the r query parameter \r",
                  "input_r \u003d pm.request.url.query.get(\"r\");\r",
                  "if (input_r !\u003d null) { \r",
                  "input_r \u003d decodeURIComponent(input_r);\r",
                  "}\r",
                  "// Printing value of input_r variable\r",
                  "console.log(\"Printing value of input_r\");\r",
                  "console.log(input_r);\r",
                  "\r",
                  "valuesToConsiderAsNull \u003d [\"N/A\"];\r",
                  "// \u0026200\r",
                  "response \u003d {\"Title\":\"Finale\",\"Year\":\"2013\",\"Rated\":\"TV-PG\",\"Released\":\"16 May 2013\",\"Season\":\"9\",\"Episode\":\"23\",\"Runtime\":\"51 min\",\"Genre\":\"Comedy\",\"Director\":\"Ken Kwapis\",\"Writer\":\"Greg Daniels, Ricky Gervais, Stephen Merchant\",\"Actors\":\"Rainn Wilson, John Krasinski, Jenna Fischer\",\"Plot\":\"One year later, Dunder Mifflin employees past and present reunite for a panel discussion about the documentary and to attend Dwight and Angela\u0027s wedding.\",\"Language\":\"English\",\"Country\":\"N/A\",\"Awards\":\"N/A\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BOTEwMDMxNjAtZGNlOS00MzhkLTlmMDgtMWUzNDIyNzg0Njk4XkEyXkFqcGdeQXVyNTM3MDMyMDQ@._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"9.8/10\"}],\"Metascore\":\"N/A\",\"imdbRating\":\"9.8\",\"imdbVotes\":\"18175\",\"imdbID\":\"tt2669746\",\"seriesID\":\"tt0386676\",\"Type\":\"episode\",\"Response\":\"True\"};\r",
                  "// Printing value of response variable\r",
                  "console.log(\"Printing value of response\");\r",
                  "console.log(response);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// input.i \u003d\u003d return.imdbID\r",
                  "pm.test(\"input.i \u003d\u003d return.imdbID\", () \u003d\u003e {\r",
                  "// Getting value of variable: input_i\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "\r",
                  "// Getting value of variable: return_imdbID\r",
                  "return_imdbID \u003d response[\"imdbID\"];\r",
                  "// Printing value of return_imdbID variable\r",
                  "console.log(\"Printing value of return_imdbID\");\r",
                  "console.log(return_imdbID);\r",
                  "\r",
                  "\r",
                  "if((input_i !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(input_i)) \u0026\u0026 (return_imdbID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbID))) {\r",
                  "pm.expect(input_i).to.eql(return_imdbID);\r",
                  "}\r",
                  "})\r",
                  "// return.Response \u003d\u003d \"True\"\r",
                  "pm.test(\"return.Response \u003d\u003d \\\"True\\\"\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect([\"True\"].includes(return_Response)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Response)\u003d\u003d4\r",
                  "pm.test(\"LENGTH(return.Response)\u003d\u003d4\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect(return_Response).to.have.length(4);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Released)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.Released)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Released\r",
                  "return_Released \u003d response[\"Released\"];\r",
                  "// Printing value of return_Released variable\r",
                  "console.log(\"Printing value of return_Released\");\r",
                  "console.log(return_Released);\r",
                  "\r",
                  "\r",
                  "if((return_Released !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Released))) {\r",
                  "pm.expect(return_Released).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Poster is Url\r",
                  "pm.test(\"return.Poster is Url\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Poster\r",
                  "return_Poster \u003d response[\"Poster\"];\r",
                  "// Printing value of return_Poster variable\r",
                  "console.log(\"Printing value of return_Poster\");\r",
                  "console.log(return_Poster);\r",
                  "\r",
                  "\r",
                  "if((return_Poster !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Poster))) {\r",
                  "pm.expect(return_Poster).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Metascore is Numeric\r",
                  "pm.test(\"return.Metascore is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Metascore\r",
                  "return_Metascore \u003d response[\"Metascore\"];\r",
                  "// Printing value of return_Metascore variable\r",
                  "console.log(\"Printing value of return_Metascore\");\r",
                  "console.log(return_Metascore);\r",
                  "\r",
                  "\r",
                  "if((return_Metascore !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Metascore))) {\r",
                  "pm.expect(return_Metascore).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbRating is Numeric\r",
                  "pm.test(\"return.imdbRating is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbRating\r",
                  "return_imdbRating \u003d response[\"imdbRating\"];\r",
                  "// Printing value of return_imdbRating variable\r",
                  "console.log(\"Printing value of return_imdbRating\");\r",
                  "console.log(return_imdbRating);\r",
                  "\r",
                  "\r",
                  "if((return_imdbRating !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbRating))) {\r",
                  "pm.expect(return_imdbRating).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbVotes is Numeric\r",
                  "pm.test(\"return.imdbVotes is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbVotes\r",
                  "return_imdbVotes \u003d response[\"imdbVotes\"];\r",
                  "// Printing value of return_imdbVotes variable\r",
                  "console.log(\"Printing value of return_imdbVotes\");\r",
                  "console.log(return_imdbVotes);\r",
                  "\r",
                  "\r",
                  "if((return_imdbVotes !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbVotes))) {\r",
                  "pm.expect(return_imdbVotes).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Type one of { \"episode\", \"movie\", \"series\" }\r",
                  "pm.test(\"return.Type one of { \\\"episode\\\", \\\"movie\\\", \\\"series\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Type\r",
                  "return_Type \u003d response[\"Type\"];\r",
                  "// Printing value of return_Type variable\r",
                  "console.log(\"Printing value of return_Type\");\r",
                  "console.log(return_Type);\r",
                  "\r",
                  "\r",
                  "if((return_Type !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Type))) {\r",
                  "pm.expect([\"episode\", \"movie\", \"series\"].includes(return_Type)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.DVD)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.DVD)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_DVD\r",
                  "return_DVD \u003d response[\"DVD\"];\r",
                  "// Printing value of return_DVD variable\r",
                  "console.log(\"Printing value of return_DVD\");\r",
                  "console.log(return_DVD);\r",
                  "\r",
                  "\r",
                  "if((return_DVD !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_DVD))) {\r",
                  "pm.expect(return_DVD).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Episode is Numeric\r",
                  "pm.test(\"return.Episode is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Episode\r",
                  "return_Episode \u003d response[\"Episode\"];\r",
                  "// Printing value of return_Episode variable\r",
                  "console.log(\"Printing value of return_Episode\");\r",
                  "console.log(return_Episode);\r",
                  "\r",
                  "\r",
                  "if((return_Episode !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Episode))) {\r",
                  "pm.expect(return_Episode).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Season is Numeric\r",
                  "pm.test(\"return.Season is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Season\r",
                  "return_Season \u003d response[\"Season\"];\r",
                  "// Printing value of return_Season variable\r",
                  "console.log(\"Printing value of return_Season\");\r",
                  "console.log(return_Season);\r",
                  "\r",
                  "\r",
                  "if((return_Season !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Season))) {\r",
                  "pm.expect(return_Season).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.seriesID)\u003d\u003d9\r",
                  "pm.test(\"LENGTH(return.seriesID)\u003d\u003d9\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_seriesID\r",
                  "return_seriesID \u003d response[\"seriesID\"];\r",
                  "// Printing value of return_seriesID variable\r",
                  "console.log(\"Printing value of return_seriesID\");\r",
                  "console.log(return_seriesID);\r",
                  "\r",
                  "\r",
                  "if((return_seriesID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_seriesID))) {\r",
                  "pm.expect(return_seriesID).to.have.length(9);\r",
                  "}\r",
                  "})\r",
                  "// return.totalSeasons is Numeric\r",
                  "pm.test(\"return.totalSeasons is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_totalSeasons\r",
                  "return_totalSeasons \u003d response[\"totalSeasons\"];\r",
                  "// Printing value of return_totalSeasons variable\r",
                  "console.log(\"Printing value of return_totalSeasons\");\r",
                  "console.log(return_totalSeasons);\r",
                  "\r",
                  "\r",
                  "if((return_totalSeasons !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_totalSeasons))) {\r",
                  "pm.expect(return_totalSeasons).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "// 200\u0026Ratings\r",
                  "response_Ratings \u003d response[\"Ratings\"]\r",
                  "if(response_Ratings !\u003d null) {\r",
                  "// Printing value of response_Ratings variable\r",
                  "console.log(\"Printing value of response_Ratings\");\r",
                  "console.log(response_Ratings);\r",
                  "\r",
                  "for(response_Ratings_index in response_Ratings) {\r",
                  "response_Ratings_element \u003d response_Ratings[response_Ratings_index]\r",
                  "// Printing value of response_Ratings_element variable\r",
                  "console.log(\"Printing value of response_Ratings_element\");\r",
                  "console.log(response_Ratings_element);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// return.Source one of { \"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\" }\r",
                  "pm.test(\"return.Source one of { \\\"Internet Movie Database\\\", \\\"Metacritic\\\", \\\"Rotten Tomatoes\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Source\r",
                  "return_Source \u003d response_Ratings_element[\"Source\"];\r",
                  "// Printing value of return_Source variable\r",
                  "console.log(\"Printing value of return_Source\");\r",
                  "console.log(return_Source);\r",
                  "\r",
                  "\r",
                  "if((return_Source !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Source))) {\r",
                  "pm.expect([\"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\"].includes(return_Source)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "} // Closing for response\r",
                  "} // Closing if response\r"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://omdbapi.com/",
              "protocol": "https",
              "host": [
                "omdbapi",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "apikey",
                  "value": "anonymous",
                  "disabled": false
                },
                {
                  "key": "plot",
                  "value": "short",
                  "disabled": false
                },
                {
                  "key": "i",
                  "value": "tt2669746",
                  "disabled": false
                },
                {
                  "key": "y",
                  "value": "2011",
                  "disabled": false
                },
                {
                  "key": "type",
                  "value": "series",
                  "disabled": false
                }
              ],
              "variable": []
            },
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "name": "Original_Test0002",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Getting value of the t query parameter \r",
                  "input_t \u003d pm.request.url.query.get(\"t\");\r",
                  "if (input_t !\u003d null) { \r",
                  "input_t \u003d decodeURIComponent(input_t);\r",
                  "}\r",
                  "// Printing value of input_t variable\r",
                  "console.log(\"Printing value of input_t\");\r",
                  "console.log(input_t);\r",
                  "\r",
                  "// Getting value of the i query parameter \r",
                  "input_i \u003d pm.request.url.query.get(\"i\");\r",
                  "if (input_i !\u003d null) { \r",
                  "input_i \u003d decodeURIComponent(input_i);\r",
                  "}\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "// Getting value of the type query parameter \r",
                  "input_type \u003d pm.request.url.query.get(\"type\");\r",
                  "if (input_type !\u003d null) { \r",
                  "input_type \u003d decodeURIComponent(input_type);\r",
                  "}\r",
                  "// Printing value of input_type variable\r",
                  "console.log(\"Printing value of input_type\");\r",
                  "console.log(input_type);\r",
                  "\r",
                  "// Getting value of the y query parameter \r",
                  "input_y \u003d pm.request.url.query.get(\"y\");\r",
                  "if (input_y !\u003d null) { \r",
                  "input_y \u003d decodeURIComponent(input_y);\r",
                  "input_y \u003d parseInt(input_y);\r",
                  "}\r",
                  "// Printing value of input_y variable\r",
                  "console.log(\"Printing value of input_y\");\r",
                  "console.log(input_y);\r",
                  "\r",
                  "// Getting value of the plot query parameter \r",
                  "input_plot \u003d pm.request.url.query.get(\"plot\");\r",
                  "if (input_plot !\u003d null) { \r",
                  "input_plot \u003d decodeURIComponent(input_plot);\r",
                  "}\r",
                  "// Printing value of input_plot variable\r",
                  "console.log(\"Printing value of input_plot\");\r",
                  "console.log(input_plot);\r",
                  "\r",
                  "// Getting value of the r query parameter \r",
                  "input_r \u003d pm.request.url.query.get(\"r\");\r",
                  "if (input_r !\u003d null) { \r",
                  "input_r \u003d decodeURIComponent(input_r);\r",
                  "}\r",
                  "// Printing value of input_r variable\r",
                  "console.log(\"Printing value of input_r\");\r",
                  "console.log(input_r);\r",
                  "\r",
                  "valuesToConsiderAsNull \u003d [\"N/A\"];\r",
                  "// \u0026200\r",
                  "response \u003d {\"Title\":\"The Great Gatsby\",\"Year\":\"2013\",\"Rated\":\"PG-13\",\"Released\":\"10 May 2013\",\"Runtime\":\"143 min\",\"Genre\":\"Drama, Romance\",\"Director\":\"Baz Luhrmann\",\"Writer\":\"Baz Luhrmann, Craig Pearce, F. Scott Fitzgerald\",\"Actors\":\"Leonardo DiCaprio, Carey Mulligan, Joel Edgerton\",\"Plot\":\"A writer and wall street trader, Nick, finds himself drawn to the past and lifestyle of his millionaire neighbor, Jay Gatsby.\",\"Language\":\"English\",\"Country\":\"Australia, United States\",\"Awards\":\"Won 2 Oscars. 50 wins \u0026 86 nominations total\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTkxNTk1ODcxNl5BMl5BanBnXkFtZTcwMDI1OTMzOQ@@._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"7.2/10\"},{\"Source\":\"Rotten Tomatoes\",\"Value\":\"48%\"},{\"Source\":\"Metacritic\",\"Value\":\"55/100\"}],\"Metascore\":\"55\",\"imdbRating\":\"7.2\",\"imdbVotes\":\"537,191\",\"imdbID\":\"tt1343092\",\"Type\":\"movie\",\"DVD\":\"27 Aug 2013\",\"BoxOffice\":\"$144,857,996\",\"Production\":\"N/A\",\"Website\":\"N/A\",\"Response\":\"True\"};\r",
                  "// Printing value of response variable\r",
                  "console.log(\"Printing value of response\");\r",
                  "console.log(response);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// input.i \u003d\u003d return.imdbID\r",
                  "pm.test(\"input.i \u003d\u003d return.imdbID\", () \u003d\u003e {\r",
                  "// Getting value of variable: input_i\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "\r",
                  "// Getting value of variable: return_imdbID\r",
                  "return_imdbID \u003d response[\"imdbID\"];\r",
                  "// Printing value of return_imdbID variable\r",
                  "console.log(\"Printing value of return_imdbID\");\r",
                  "console.log(return_imdbID);\r",
                  "\r",
                  "\r",
                  "if((input_i !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(input_i)) \u0026\u0026 (return_imdbID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbID))) {\r",
                  "pm.expect(input_i).to.eql(return_imdbID);\r",
                  "}\r",
                  "})\r",
                  "// return.Response \u003d\u003d \"True\"\r",
                  "pm.test(\"return.Response \u003d\u003d \\\"True\\\"\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect([\"True\"].includes(return_Response)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Response)\u003d\u003d4\r",
                  "pm.test(\"LENGTH(return.Response)\u003d\u003d4\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect(return_Response).to.have.length(4);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Released)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.Released)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Released\r",
                  "return_Released \u003d response[\"Released\"];\r",
                  "// Printing value of return_Released variable\r",
                  "console.log(\"Printing value of return_Released\");\r",
                  "console.log(return_Released);\r",
                  "\r",
                  "\r",
                  "if((return_Released !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Released))) {\r",
                  "pm.expect(return_Released).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Poster is Url\r",
                  "pm.test(\"return.Poster is Url\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Poster\r",
                  "return_Poster \u003d response[\"Poster\"];\r",
                  "// Printing value of return_Poster variable\r",
                  "console.log(\"Printing value of return_Poster\");\r",
                  "console.log(return_Poster);\r",
                  "\r",
                  "\r",
                  "if((return_Poster !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Poster))) {\r",
                  "pm.expect(return_Poster).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Metascore is Numeric\r",
                  "pm.test(\"return.Metascore is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Metascore\r",
                  "return_Metascore \u003d response[\"Metascore\"];\r",
                  "// Printing value of return_Metascore variable\r",
                  "console.log(\"Printing value of return_Metascore\");\r",
                  "console.log(return_Metascore);\r",
                  "\r",
                  "\r",
                  "if((return_Metascore !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Metascore))) {\r",
                  "pm.expect(return_Metascore).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbRating is Numeric\r",
                  "pm.test(\"return.imdbRating is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbRating\r",
                  "return_imdbRating \u003d response[\"imdbRating\"];\r",
                  "// Printing value of return_imdbRating variable\r",
                  "console.log(\"Printing value of return_imdbRating\");\r",
                  "console.log(return_imdbRating);\r",
                  "\r",
                  "\r",
                  "if((return_imdbRating !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbRating))) {\r",
                  "pm.expect(return_imdbRating).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbVotes is Numeric\r",
                  "pm.test(\"return.imdbVotes is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbVotes\r",
                  "return_imdbVotes \u003d response[\"imdbVotes\"];\r",
                  "// Printing value of return_imdbVotes variable\r",
                  "console.log(\"Printing value of return_imdbVotes\");\r",
                  "console.log(return_imdbVotes);\r",
                  "\r",
                  "\r",
                  "if((return_imdbVotes !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbVotes))) {\r",
                  "pm.expect(return_imdbVotes).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Type one of { \"episode\", \"movie\", \"series\" }\r",
                  "pm.test(\"return.Type one of { \\\"episode\\\", \\\"movie\\\", \\\"series\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Type\r",
                  "return_Type \u003d response[\"Type\"];\r",
                  "// Printing value of return_Type variable\r",
                  "console.log(\"Printing value of return_Type\");\r",
                  "console.log(return_Type);\r",
                  "\r",
                  "\r",
                  "if((return_Type !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Type))) {\r",
                  "pm.expect([\"episode\", \"movie\", \"series\"].includes(return_Type)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.DVD)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.DVD)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_DVD\r",
                  "return_DVD \u003d response[\"DVD\"];\r",
                  "// Printing value of return_DVD variable\r",
                  "console.log(\"Printing value of return_DVD\");\r",
                  "console.log(return_DVD);\r",
                  "\r",
                  "\r",
                  "if((return_DVD !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_DVD))) {\r",
                  "pm.expect(return_DVD).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Episode is Numeric\r",
                  "pm.test(\"return.Episode is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Episode\r",
                  "return_Episode \u003d response[\"Episode\"];\r",
                  "// Printing value of return_Episode variable\r",
                  "console.log(\"Printing value of return_Episode\");\r",
                  "console.log(return_Episode);\r",
                  "\r",
                  "\r",
                  "if((return_Episode !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Episode))) {\r",
                  "pm.expect(return_Episode).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Season is Numeric\r",
                  "pm.test(\"return.Season is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Season\r",
                  "return_Season \u003d response[\"Season\"];\r",
                  "// Printing value of return_Season variable\r",
                  "console.log(\"Printing value of return_Season\");\r",
                  "console.log(return_Season);\r",
                  "\r",
                  "\r",
                  "if((return_Season !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Season))) {\r",
                  "pm.expect(return_Season).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.seriesID)\u003d\u003d9\r",
                  "pm.test(\"LENGTH(return.seriesID)\u003d\u003d9\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_seriesID\r",
                  "return_seriesID \u003d response[\"seriesID\"];\r",
                  "// Printing value of return_seriesID variable\r",
                  "console.log(\"Printing value of return_seriesID\");\r",
                  "console.log(return_seriesID);\r",
                  "\r",
                  "\r",
                  "if((return_seriesID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_seriesID))) {\r",
                  "pm.expect(return_seriesID).to.have.length(9);\r",
                  "}\r",
                  "})\r",
                  "// return.totalSeasons is Numeric\r",
                  "pm.test(\"return.totalSeasons is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_totalSeasons\r",
                  "return_totalSeasons \u003d response[\"totalSeasons\"];\r",
                  "// Printing value of return_totalSeasons variable\r",
                  "console.log(\"Printing value of return_totalSeasons\");\r",
                  "console.log(return_totalSeasons);\r",
                  "\r",
                  "\r",
                  "if((return_totalSeasons !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_totalSeasons))) {\r",
                  "pm.expect(return_totalSeasons).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "// 200\u0026Ratings\r",
                  "response_Ratings \u003d response[\"Ratings\"]\r",
                  "if(response_Ratings !\u003d null) {\r",
                  "// Printing value of response_Ratings variable\r",
                  "console.log(\"Printing value of response_Ratings\");\r",
                  "console.log(response_Ratings);\r",
                  "\r",
                  "for(response_Ratings_index in response_Ratings) {\r",
                  "response_Ratings_element \u003d response_Ratings[response_Ratings_index]\r",
                  "// Printing value of response_Ratings_element variable\r",
                  "console.log(\"Printing value of response_Ratings_element\");\r",
                  "console.log(response_Ratings_element);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// return.Source one of { \"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\" }\r",
                  "pm.test(\"return.Source one of { \\\"Internet Movie Database\\\", \\\"Metacritic\\\", \\\"Rotten Tomatoes\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Source\r",
                  "return_Source \u003d response_Ratings_element[\"Source\"];\r",
                  "// Printing value of return_Source variable\r",
                  "console.log(\"Printing value of return_Source\");\r",
                  "console.log(return_Source);\r",
                  "\r",
                  "\r",
                  "if((return_Source !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Source))) {\r",
                  "pm.expect([\"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\"].includes(return_Source)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "} // Closing for response\r",
                  "} // Closing if response\r"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://omdbapi.com/",
              "protocol": "https",
              "host": [
                "omdbapi",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "t",
                  "value": "The Great Gatsby",
                  "disabled": false
                },
                {
                  "key": "apikey",
                  "value": "anonymous",
                  "disabled": false
                },
                {
                  "key": "plot",
                  "value": "short",
                  "disabled": false
                }
              ],
              "variable": []
            },
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "name": "Original_Test0003",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Getting value of the t query parameter \r",
                  "input_t \u003d pm.request.url.query.get(\"t\");\r",
                  "if (input_t !\u003d null) { \r",
                  "input_t \u003d decodeURIComponent(input_t);\r",
                  "}\r",
                  "// Printing value of input_t variable\r",
                  "console.log(\"Printing value of input_t\");\r",
                  "console.log(input_t);\r",
                  "\r",
                  "// Getting value of the i query parameter \r",
                  "input_i \u003d pm.request.url.query.get(\"i\");\r",
                  "if (input_i !\u003d null) { \r",
                  "input_i \u003d decodeURIComponent(input_i);\r",
                  "}\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "// Getting value of the type query parameter \r",
                  "input_type \u003d pm.request.url.query.get(\"type\");\r",
                  "if (input_type !\u003d null) { \r",
                  "input_type \u003d decodeURIComponent(input_type);\r",
                  "}\r",
                  "// Printing value of input_type variable\r",
                  "console.log(\"Printing value of input_type\");\r",
                  "console.log(input_type);\r",
                  "\r",
                  "// Getting value of the y query parameter \r",
                  "input_y \u003d pm.request.url.query.get(\"y\");\r",
                  "if (input_y !\u003d null) { \r",
                  "input_y \u003d decodeURIComponent(input_y);\r",
                  "input_y \u003d parseInt(input_y);\r",
                  "}\r",
                  "// Printing value of input_y variable\r",
                  "console.log(\"Printing value of input_y\");\r",
                  "console.log(input_y);\r",
                  "\r",
                  "// Getting value of the plot query parameter \r",
                  "input_plot \u003d pm.request.url.query.get(\"plot\");\r",
                  "if (input_plot !\u003d null) { \r",
                  "input_plot \u003d decodeURIComponent(input_plot);\r",
                  "}\r",
                  "// Printing value of input_plot variable\r",
                  "console.log(\"Printing value of input_plot\");\r",
                  "console.log(input_plot);\r",
                  "\r",
                  "// Getting value of the r query parameter \r",
                  "input_r \u003d pm.request.url.query.get(\"r\");\r",
                  "if (input_r !\u003d null) { \r",
                  "input_r \u003d decodeURIComponent(input_r);\r",
                  "}\r",
                  "// Printing value of input_r variable\r",
                  "console.log(\"Printing value of input_r\");\r",
                  "console.log(input_r);\r",
                  "\r",
                  "valuesToConsiderAsNull \u003d [\"N/A\"];\r",
                  "// \u0026200\r",
                  "response \u003d {\"Title\":\"The Movement\",\"Year\":\"2015\",\"Rated\":\"N/A\",\"Released\":\"03 Mar 2016\",\"Runtime\":\"70 min\",\"Genre\":\"Drama\",\"Director\":\"Benjamín Naishtat\",\"Writer\":\"Benjamín Naishtat\",\"Actors\":\"Pablo Cedrón, Céline Latil, Francisco Lumerman\",\"Plot\":\"During the first half of the 19th century in a vast and desolated land fallen into anarchy, several armed groups drift along the infinite Pampas demanding support and food from the peasants.\",\"Language\":\"Spanish\",\"Country\":\"Argentina, South Korea\",\"Awards\":\"3 wins \u0026 2 nominations\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMjNhYjUwMmItZGQ2Mi00NzhhLThhMWItNzI2MjAwZDk5YWRmXkEyXkFqcGdeQXVyNjU4NTgwNDQ@._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"6.0/10\"}],\"Metascore\":\"N/A\",\"imdbRating\":\"6.0\",\"imdbVotes\":\"150\",\"imdbID\":\"tt4691974\",\"Type\":\"movie\",\"DVD\":\"N/A\",\"BoxOffice\":\"N/A\",\"Production\":\"N/A\",\"Website\":\"N/A\",\"Response\":\"True\"};\r",
                  "// Printing value of response variable\r",
                  "console.log(\"Printing value of response\");\r",
                  "console.log(response);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// input.i \u003d\u003d return.imdbID\r",
                  "pm.test(\"input.i \u003d\u003d return.imdbID\", () \u003d\u003e {\r",
                  "// Getting value of variable: input_i\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "\r",
                  "// Getting value of variable: return_imdbID\r",
                  "return_imdbID \u003d response[\"imdbID\"];\r",
                  "// Printing value of return_imdbID variable\r",
                  "console.log(\"Printing value of return_imdbID\");\r",
                  "console.log(return_imdbID);\r",
                  "\r",
                  "\r",
                  "if((input_i !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(input_i)) \u0026\u0026 (return_imdbID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbID))) {\r",
                  "pm.expect(input_i).to.eql(return_imdbID);\r",
                  "}\r",
                  "})\r",
                  "// return.Response \u003d\u003d \"True\"\r",
                  "pm.test(\"return.Response \u003d\u003d \\\"True\\\"\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect([\"True\"].includes(return_Response)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Response)\u003d\u003d4\r",
                  "pm.test(\"LENGTH(return.Response)\u003d\u003d4\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect(return_Response).to.have.length(4);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Released)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.Released)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Released\r",
                  "return_Released \u003d response[\"Released\"];\r",
                  "// Printing value of return_Released variable\r",
                  "console.log(\"Printing value of return_Released\");\r",
                  "console.log(return_Released);\r",
                  "\r",
                  "\r",
                  "if((return_Released !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Released))) {\r",
                  "pm.expect(return_Released).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Poster is Url\r",
                  "pm.test(\"return.Poster is Url\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Poster\r",
                  "return_Poster \u003d response[\"Poster\"];\r",
                  "// Printing value of return_Poster variable\r",
                  "console.log(\"Printing value of return_Poster\");\r",
                  "console.log(return_Poster);\r",
                  "\r",
                  "\r",
                  "if((return_Poster !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Poster))) {\r",
                  "pm.expect(return_Poster).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Metascore is Numeric\r",
                  "pm.test(\"return.Metascore is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Metascore\r",
                  "return_Metascore \u003d response[\"Metascore\"];\r",
                  "// Printing value of return_Metascore variable\r",
                  "console.log(\"Printing value of return_Metascore\");\r",
                  "console.log(return_Metascore);\r",
                  "\r",
                  "\r",
                  "if((return_Metascore !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Metascore))) {\r",
                  "pm.expect(return_Metascore).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbRating is Numeric\r",
                  "pm.test(\"return.imdbRating is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbRating\r",
                  "return_imdbRating \u003d response[\"imdbRating\"];\r",
                  "// Printing value of return_imdbRating variable\r",
                  "console.log(\"Printing value of return_imdbRating\");\r",
                  "console.log(return_imdbRating);\r",
                  "\r",
                  "\r",
                  "if((return_imdbRating !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbRating))) {\r",
                  "pm.expect(return_imdbRating).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbVotes is Numeric\r",
                  "pm.test(\"return.imdbVotes is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbVotes\r",
                  "return_imdbVotes \u003d response[\"imdbVotes\"];\r",
                  "// Printing value of return_imdbVotes variable\r",
                  "console.log(\"Printing value of return_imdbVotes\");\r",
                  "console.log(return_imdbVotes);\r",
                  "\r",
                  "\r",
                  "if((return_imdbVotes !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbVotes))) {\r",
                  "pm.expect(return_imdbVotes).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Type one of { \"episode\", \"movie\", \"series\" }\r",
                  "pm.test(\"return.Type one of { \\\"episode\\\", \\\"movie\\\", \\\"series\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Type\r",
                  "return_Type \u003d response[\"Type\"];\r",
                  "// Printing value of return_Type variable\r",
                  "console.log(\"Printing value of return_Type\");\r",
                  "console.log(return_Type);\r",
                  "\r",
                  "\r",
                  "if((return_Type !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Type))) {\r",
                  "pm.expect([\"episode\", \"movie\", \"series\"].includes(return_Type)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.DVD)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.DVD)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_DVD\r",
                  "return_DVD \u003d response[\"DVD\"];\r",
                  "// Printing value of return_DVD variable\r",
                  "console.log(\"Printing value of return_DVD\");\r",
                  "console.log(return_DVD);\r",
                  "\r",
                  "\r",
                  "if((return_DVD !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_DVD))) {\r",
                  "pm.expect(return_DVD).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Episode is Numeric\r",
                  "pm.test(\"return.Episode is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Episode\r",
                  "return_Episode \u003d response[\"Episode\"];\r",
                  "// Printing value of return_Episode variable\r",
                  "console.log(\"Printing value of return_Episode\");\r",
                  "console.log(return_Episode);\r",
                  "\r",
                  "\r",
                  "if((return_Episode !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Episode))) {\r",
                  "pm.expect(return_Episode).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Season is Numeric\r",
                  "pm.test(\"return.Season is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Season\r",
                  "return_Season \u003d response[\"Season\"];\r",
                  "// Printing value of return_Season variable\r",
                  "console.log(\"Printing value of return_Season\");\r",
                  "console.log(return_Season);\r",
                  "\r",
                  "\r",
                  "if((return_Season !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Season))) {\r",
                  "pm.expect(return_Season).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.seriesID)\u003d\u003d9\r",
                  "pm.test(\"LENGTH(return.seriesID)\u003d\u003d9\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_seriesID\r",
                  "return_seriesID \u003d response[\"seriesID\"];\r",
                  "// Printing value of return_seriesID variable\r",
                  "console.log(\"Printing value of return_seriesID\");\r",
                  "console.log(return_seriesID);\r",
                  "\r",
                  "\r",
                  "if((return_seriesID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_seriesID))) {\r",
                  "pm.expect(return_seriesID).to.have.length(9);\r",
                  "}\r",
                  "})\r",
                  "// return.totalSeasons is Numeric\r",
                  "pm.test(\"return.totalSeasons is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_totalSeasons\r",
                  "return_totalSeasons \u003d response[\"totalSeasons\"];\r",
                  "// Printing value of return_totalSeasons variable\r",
                  "console.log(\"Printing value of return_totalSeasons\");\r",
                  "console.log(return_totalSeasons);\r",
                  "\r",
                  "\r",
                  "if((return_totalSeasons !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_totalSeasons))) {\r",
                  "pm.expect(return_totalSeasons).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "// 200\u0026Ratings\r",
                  "response_Ratings \u003d response[\"Ratings\"]\r",
                  "if(response_Ratings !\u003d null) {\r",
                  "// Printing value of response_Ratings variable\r",
                  "console.log(\"Printing value of response_Ratings\");\r",
                  "console.log(response_Ratings);\r",
                  "\r",
                  "for(response_Ratings_index in response_Ratings) {\r",
                  "response_Ratings_element \u003d response_Ratings[response_Ratings_index]\r",
                  "// Printing value of response_Ratings_element variable\r",
                  "console.log(\"Printing value of response_Ratings_element\");\r",
                  "console.log(response_Ratings_element);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// return.Source one of { \"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\" }\r",
                  "pm.test(\"return.Source one of { \\\"Internet Movie Database\\\", \\\"Metacritic\\\", \\\"Rotten Tomatoes\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Source\r",
                  "return_Source \u003d response_Ratings_element[\"Source\"];\r",
                  "// Printing value of return_Source variable\r",
                  "console.log(\"Printing value of return_Source\");\r",
                  "console.log(return_Source);\r",
                  "\r",
                  "\r",
                  "if((return_Source !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Source))) {\r",
                  "pm.expect([\"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\"].includes(return_Source)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "} // Closing for response\r",
                  "} // Closing if response\r"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://omdbapi.com/",
              "protocol": "https",
              "host": [
                "omdbapi",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "t",
                  "value": "The Movement",
                  "disabled": false
                },
                {
                  "key": "apikey",
                  "value": "anonymous",
                  "disabled": false
                },
                {
                  "key": "type",
                  "value": "movie",
                  "disabled": false
                }
              ],
              "variable": []
            },
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "name": "Original_Test0004",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Getting value of the t query parameter \r",
                  "input_t \u003d pm.request.url.query.get(\"t\");\r",
                  "if (input_t !\u003d null) { \r",
                  "input_t \u003d decodeURIComponent(input_t);\r",
                  "}\r",
                  "// Printing value of input_t variable\r",
                  "console.log(\"Printing value of input_t\");\r",
                  "console.log(input_t);\r",
                  "\r",
                  "// Getting value of the i query parameter \r",
                  "input_i \u003d pm.request.url.query.get(\"i\");\r",
                  "if (input_i !\u003d null) { \r",
                  "input_i \u003d decodeURIComponent(input_i);\r",
                  "}\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "// Getting value of the type query parameter \r",
                  "input_type \u003d pm.request.url.query.get(\"type\");\r",
                  "if (input_type !\u003d null) { \r",
                  "input_type \u003d decodeURIComponent(input_type);\r",
                  "}\r",
                  "// Printing value of input_type variable\r",
                  "console.log(\"Printing value of input_type\");\r",
                  "console.log(input_type);\r",
                  "\r",
                  "// Getting value of the y query parameter \r",
                  "input_y \u003d pm.request.url.query.get(\"y\");\r",
                  "if (input_y !\u003d null) { \r",
                  "input_y \u003d decodeURIComponent(input_y);\r",
                  "input_y \u003d parseInt(input_y);\r",
                  "}\r",
                  "// Printing value of input_y variable\r",
                  "console.log(\"Printing value of input_y\");\r",
                  "console.log(input_y);\r",
                  "\r",
                  "// Getting value of the plot query parameter \r",
                  "input_plot \u003d pm.request.url.query.get(\"plot\");\r",
                  "if (input_plot !\u003d null) { \r",
                  "input_plot \u003d decodeURIComponent(input_plot);\r",
                  "}\r",
                  "// Printing value of input_plot variable\r",
                  "console.log(\"Printing value of input_plot\");\r",
                  "console.log(input_plot);\r",
                  "\r",
                  "// Getting value of the r query parameter \r",
                  "input_r \u003d pm.request.url.query.get(\"r\");\r",
                  "if (input_r !\u003d null) { \r",
                  "input_r \u003d decodeURIComponent(input_r);\r",
                  "}\r",
                  "// Printing value of input_r variable\r",
                  "console.log(\"Printing value of input_r\");\r",
                  "console.log(input_r);\r",
                  "\r",
                  "valuesToConsiderAsNull \u003d [\"N/A\"];\r",
                  "// \u0026200\r",
                  "response \u003d {\"Title\":\"Interstellar\",\"Year\":\"2014\",\"Rated\":\"PG-13\",\"Released\":\"07 Nov 2014\",\"Runtime\":\"169 min\",\"Genre\":\"Adventure, Drama, Sci-Fi\",\"Director\":\"Christopher Nolan\",\"Writer\":\"Jonathan Nolan, Christopher Nolan\",\"Actors\":\"Matthew McConaughey, Anne Hathaway, Jessica Chastain\",\"Plot\":\"A team of explorers travel through a wormhole in space in an attempt to ensure humanity\u0027s survival.\",\"Language\":\"English\",\"Country\":\"United States, United Kingdom, Canada\",\"Awards\":\"Won 1 Oscar. 44 wins \u0026 148 nominations total\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BZjdkOTU3MDktN2IxOS00OGEyLWFmMjktY2FiMmZkNWIyODZiXkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"8.6/10\"},{\"Source\":\"Rotten Tomatoes\",\"Value\":\"73%\"},{\"Source\":\"Metacritic\",\"Value\":\"74/100\"}],\"Metascore\":\"74\",\"imdbRating\":\"8.6\",\"imdbVotes\":\"1,774,128\",\"imdbID\":\"tt0816692\",\"Type\":\"movie\",\"DVD\":\"31 Mar 2015\",\"BoxOffice\":\"$188,020,017\",\"Production\":\"N/A\",\"Website\":\"N/A\",\"Response\":\"True\"};\r",
                  "// Printing value of response variable\r",
                  "console.log(\"Printing value of response\");\r",
                  "console.log(response);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// input.i \u003d\u003d return.imdbID\r",
                  "pm.test(\"input.i \u003d\u003d return.imdbID\", () \u003d\u003e {\r",
                  "// Getting value of variable: input_i\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "\r",
                  "// Getting value of variable: return_imdbID\r",
                  "return_imdbID \u003d response[\"imdbID\"];\r",
                  "// Printing value of return_imdbID variable\r",
                  "console.log(\"Printing value of return_imdbID\");\r",
                  "console.log(return_imdbID);\r",
                  "\r",
                  "\r",
                  "if((input_i !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(input_i)) \u0026\u0026 (return_imdbID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbID))) {\r",
                  "pm.expect(input_i).to.eql(return_imdbID);\r",
                  "}\r",
                  "})\r",
                  "// return.Response \u003d\u003d \"True\"\r",
                  "pm.test(\"return.Response \u003d\u003d \\\"True\\\"\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect([\"True\"].includes(return_Response)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Response)\u003d\u003d4\r",
                  "pm.test(\"LENGTH(return.Response)\u003d\u003d4\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect(return_Response).to.have.length(4);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Released)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.Released)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Released\r",
                  "return_Released \u003d response[\"Released\"];\r",
                  "// Printing value of return_Released variable\r",
                  "console.log(\"Printing value of return_Released\");\r",
                  "console.log(return_Released);\r",
                  "\r",
                  "\r",
                  "if((return_Released !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Released))) {\r",
                  "pm.expect(return_Released).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Poster is Url\r",
                  "pm.test(\"return.Poster is Url\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Poster\r",
                  "return_Poster \u003d response[\"Poster\"];\r",
                  "// Printing value of return_Poster variable\r",
                  "console.log(\"Printing value of return_Poster\");\r",
                  "console.log(return_Poster);\r",
                  "\r",
                  "\r",
                  "if((return_Poster !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Poster))) {\r",
                  "pm.expect(return_Poster).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Metascore is Numeric\r",
                  "pm.test(\"return.Metascore is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Metascore\r",
                  "return_Metascore \u003d response[\"Metascore\"];\r",
                  "// Printing value of return_Metascore variable\r",
                  "console.log(\"Printing value of return_Metascore\");\r",
                  "console.log(return_Metascore);\r",
                  "\r",
                  "\r",
                  "if((return_Metascore !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Metascore))) {\r",
                  "pm.expect(return_Metascore).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbRating is Numeric\r",
                  "pm.test(\"return.imdbRating is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbRating\r",
                  "return_imdbRating \u003d response[\"imdbRating\"];\r",
                  "// Printing value of return_imdbRating variable\r",
                  "console.log(\"Printing value of return_imdbRating\");\r",
                  "console.log(return_imdbRating);\r",
                  "\r",
                  "\r",
                  "if((return_imdbRating !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbRating))) {\r",
                  "pm.expect(return_imdbRating).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbVotes is Numeric\r",
                  "pm.test(\"return.imdbVotes is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbVotes\r",
                  "return_imdbVotes \u003d response[\"imdbVotes\"];\r",
                  "// Printing value of return_imdbVotes variable\r",
                  "console.log(\"Printing value of return_imdbVotes\");\r",
                  "console.log(return_imdbVotes);\r",
                  "\r",
                  "\r",
                  "if((return_imdbVotes !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbVotes))) {\r",
                  "pm.expect(return_imdbVotes).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Type one of { \"episode\", \"movie\", \"series\" }\r",
                  "pm.test(\"return.Type one of { \\\"episode\\\", \\\"movie\\\", \\\"series\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Type\r",
                  "return_Type \u003d response[\"Type\"];\r",
                  "// Printing value of return_Type variable\r",
                  "console.log(\"Printing value of return_Type\");\r",
                  "console.log(return_Type);\r",
                  "\r",
                  "\r",
                  "if((return_Type !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Type))) {\r",
                  "pm.expect([\"episode\", \"movie\", \"series\"].includes(return_Type)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.DVD)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.DVD)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_DVD\r",
                  "return_DVD \u003d response[\"DVD\"];\r",
                  "// Printing value of return_DVD variable\r",
                  "console.log(\"Printing value of return_DVD\");\r",
                  "console.log(return_DVD);\r",
                  "\r",
                  "\r",
                  "if((return_DVD !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_DVD))) {\r",
                  "pm.expect(return_DVD).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Episode is Numeric\r",
                  "pm.test(\"return.Episode is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Episode\r",
                  "return_Episode \u003d response[\"Episode\"];\r",
                  "// Printing value of return_Episode variable\r",
                  "console.log(\"Printing value of return_Episode\");\r",
                  "console.log(return_Episode);\r",
                  "\r",
                  "\r",
                  "if((return_Episode !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Episode))) {\r",
                  "pm.expect(return_Episode).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Season is Numeric\r",
                  "pm.test(\"return.Season is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Season\r",
                  "return_Season \u003d response[\"Season\"];\r",
                  "// Printing value of return_Season variable\r",
                  "console.log(\"Printing value of return_Season\");\r",
                  "console.log(return_Season);\r",
                  "\r",
                  "\r",
                  "if((return_Season !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Season))) {\r",
                  "pm.expect(return_Season).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.seriesID)\u003d\u003d9\r",
                  "pm.test(\"LENGTH(return.seriesID)\u003d\u003d9\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_seriesID\r",
                  "return_seriesID \u003d response[\"seriesID\"];\r",
                  "// Printing value of return_seriesID variable\r",
                  "console.log(\"Printing value of return_seriesID\");\r",
                  "console.log(return_seriesID);\r",
                  "\r",
                  "\r",
                  "if((return_seriesID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_seriesID))) {\r",
                  "pm.expect(return_seriesID).to.have.length(9);\r",
                  "}\r",
                  "})\r",
                  "// return.totalSeasons is Numeric\r",
                  "pm.test(\"return.totalSeasons is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_totalSeasons\r",
                  "return_totalSeasons \u003d response[\"totalSeasons\"];\r",
                  "// Printing value of return_totalSeasons variable\r",
                  "console.log(\"Printing value of return_totalSeasons\");\r",
                  "console.log(return_totalSeasons);\r",
                  "\r",
                  "\r",
                  "if((return_totalSeasons !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_totalSeasons))) {\r",
                  "pm.expect(return_totalSeasons).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "// 200\u0026Ratings\r",
                  "response_Ratings \u003d response[\"Ratings\"]\r",
                  "if(response_Ratings !\u003d null) {\r",
                  "// Printing value of response_Ratings variable\r",
                  "console.log(\"Printing value of response_Ratings\");\r",
                  "console.log(response_Ratings);\r",
                  "\r",
                  "for(response_Ratings_index in response_Ratings) {\r",
                  "response_Ratings_element \u003d response_Ratings[response_Ratings_index]\r",
                  "// Printing value of response_Ratings_element variable\r",
                  "console.log(\"Printing value of response_Ratings_element\");\r",
                  "console.log(response_Ratings_element);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// return.Source one of { \"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\" }\r",
                  "pm.test(\"return.Source one of { \\\"Internet Movie Database\\\", \\\"Metacritic\\\", \\\"Rotten Tomatoes\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Source\r",
                  "return_Source \u003d response_Ratings_element[\"Source\"];\r",
                  "// Printing value of return_Source variable\r",
                  "console.log(\"Printing value of return_Source\");\r",
                  "console.log(return_Source);\r",
                  "\r",
                  "\r",
                  "if((return_Source !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Source))) {\r",
                  "pm.expect([\"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\"].includes(return_Source)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "} // Closing for response\r",
                  "} // Closing if response\r"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://omdbapi.com/",
              "protocol": "https",
              "host": [
                "omdbapi",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "r",
                  "value": "json",
                  "disabled": false
                },
                {
                  "key": "apikey",
                  "value": "anonymous",
                  "disabled": false
                },
                {
                  "key": "i",
                  "value": "tt0816692",
                  "disabled": false
                }
              ],
              "variable": []
            },
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ]
    },
    {
      "name": "Mutated0001",
      "item": [
        {
          "name": "Mutated0001_Test0001",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Getting value of the t query parameter \r",
                  "input_t \u003d pm.request.url.query.get(\"t\");\r",
                  "if (input_t !\u003d null) { \r",
                  "input_t \u003d decodeURIComponent(input_t);\r",
                  "}\r",
                  "// Printing value of input_t variable\r",
                  "console.log(\"Printing value of input_t\");\r",
                  "console.log(input_t);\r",
                  "\r",
                  "// Getting value of the i query parameter \r",
                  "input_i \u003d pm.request.url.query.get(\"i\");\r",
                  "if (input_i !\u003d null) { \r",
                  "input_i \u003d decodeURIComponent(input_i);\r",
                  "}\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "// Getting value of the type query parameter \r",
                  "input_type \u003d pm.request.url.query.get(\"type\");\r",
                  "if (input_type !\u003d null) { \r",
                  "input_type \u003d decodeURIComponent(input_type);\r",
                  "}\r",
                  "// Printing value of input_type variable\r",
                  "console.log(\"Printing value of input_type\");\r",
                  "console.log(input_type);\r",
                  "\r",
                  "// Getting value of the y query parameter \r",
                  "input_y \u003d pm.request.url.query.get(\"y\");\r",
                  "if (input_y !\u003d null) { \r",
                  "input_y \u003d decodeURIComponent(input_y);\r",
                  "input_y \u003d parseInt(input_y);\r",
                  "}\r",
                  "// Printing value of input_y variable\r",
                  "console.log(\"Printing value of input_y\");\r",
                  "console.log(input_y);\r",
                  "\r",
                  "// Getting value of the plot query parameter \r",
                  "input_plot \u003d pm.request.url.query.get(\"plot\");\r",
                  "if (input_plot !\u003d null) { \r",
                  "input_plot \u003d decodeURIComponent(input_plot);\r",
                  "}\r",
                  "// Printing value of input_plot variable\r",
                  "console.log(\"Printing value of input_plot\");\r",
                  "console.log(input_plot);\r",
                  "\r",
                  "// Getting value of the r query parameter \r",
                  "input_r \u003d pm.request.url.query.get(\"r\");\r",
                  "if (input_r !\u003d null) { \r",
                  "input_r \u003d decodeURIComponent(input_r);\r",
                  "}\r",
                  "// Printing value of input_r variable\r",
                  "console.log(\"Printing value of input_r\");\r",
                  "console.log(input_r);\r",
                  "\r",
                  "valuesToConsiderAsNull \u003d [\"N/A\"];\r",
                  "// \u0026200\r",
                  "response \u003d {\"Title\":\"Finale\",\"Year\":\"2013\",\"Rated\":\"TV-PG\",\"Released\":\"16 May 2013\",\"Season\":\"9\",\"Episode\":\"23\",\"Runtime\":\"51 min\",\"Genre\":\"Comedy\",\"Director\":\"Ken Kwapis\",\"Writer\":\"Greg Daniels, Ricky Gervais, Stephen Merchant\",\"Actors\":\"Rainn Wilson, John Krasinski, Jenna Fischer\",\"Plot\":\"One year later, Dunder Mifflin employees past and present reunite for a panel discussion about the documentary and to attend Dwight and Angela\u0027s wedding.\",\"Language\":\"English\",\"Country\":\"N/A\",\"Awards\":\"N/A\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BOTEwMDMxNjAtZGNlOS00MzhkLTlmMDgtMWUzNDIyNzg0Njk4XkEyXkFqcGdeQXVyNTM3MDMyMDQ@._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"9.8/10\"}],\"Metascore\":\"N/A\",\"imdbRating\":\"9.8\",\"imdbVotes\":\"18175\",\"imdbID\":\"tt2669746\",\"seriesID\":\"tt038667r6\",\"Type\":\"episode\",\"Response\":\"True\"};\r",
                  "// Printing value of response variable\r",
                  "console.log(\"Printing value of response\");\r",
                  "console.log(response);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// input.i \u003d\u003d return.imdbID\r",
                  "pm.test(\"input.i \u003d\u003d return.imdbID\", () \u003d\u003e {\r",
                  "// Getting value of variable: input_i\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "\r",
                  "// Getting value of variable: return_imdbID\r",
                  "return_imdbID \u003d response[\"imdbID\"];\r",
                  "// Printing value of return_imdbID variable\r",
                  "console.log(\"Printing value of return_imdbID\");\r",
                  "console.log(return_imdbID);\r",
                  "\r",
                  "\r",
                  "if((input_i !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(input_i)) \u0026\u0026 (return_imdbID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbID))) {\r",
                  "pm.expect(input_i).to.eql(return_imdbID);\r",
                  "}\r",
                  "})\r",
                  "// return.Response \u003d\u003d \"True\"\r",
                  "pm.test(\"return.Response \u003d\u003d \\\"True\\\"\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect([\"True\"].includes(return_Response)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Response)\u003d\u003d4\r",
                  "pm.test(\"LENGTH(return.Response)\u003d\u003d4\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect(return_Response).to.have.length(4);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Released)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.Released)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Released\r",
                  "return_Released \u003d response[\"Released\"];\r",
                  "// Printing value of return_Released variable\r",
                  "console.log(\"Printing value of return_Released\");\r",
                  "console.log(return_Released);\r",
                  "\r",
                  "\r",
                  "if((return_Released !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Released))) {\r",
                  "pm.expect(return_Released).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Poster is Url\r",
                  "pm.test(\"return.Poster is Url\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Poster\r",
                  "return_Poster \u003d response[\"Poster\"];\r",
                  "// Printing value of return_Poster variable\r",
                  "console.log(\"Printing value of return_Poster\");\r",
                  "console.log(return_Poster);\r",
                  "\r",
                  "\r",
                  "if((return_Poster !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Poster))) {\r",
                  "pm.expect(return_Poster).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Metascore is Numeric\r",
                  "pm.test(\"return.Metascore is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Metascore\r",
                  "return_Metascore \u003d response[\"Metascore\"];\r",
                  "// Printing value of return_Metascore variable\r",
                  "console.log(\"Printing value of return_Metascore\");\r",
                  "console.log(return_Metascore);\r",
                  "\r",
                  "\r",
                  "if((return_Metascore !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Metascore))) {\r",
                  "pm.expect(return_Metascore).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbRating is Numeric\r",
                  "pm.test(\"return.imdbRating is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbRating\r",
                  "return_imdbRating \u003d response[\"imdbRating\"];\r",
                  "// Printing value of return_imdbRating variable\r",
                  "console.log(\"Printing value of return_imdbRating\");\r",
                  "console.log(return_imdbRating);\r",
                  "\r",
                  "\r",
                  "if((return_imdbRating !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbRating))) {\r",
                  "pm.expect(return_imdbRating).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbVotes is Numeric\r",
                  "pm.test(\"return.imdbVotes is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbVotes\r",
                  "return_imdbVotes \u003d response[\"imdbVotes\"];\r",
                  "// Printing value of return_imdbVotes variable\r",
                  "console.log(\"Printing value of return_imdbVotes\");\r",
                  "console.log(return_imdbVotes);\r",
                  "\r",
                  "\r",
                  "if((return_imdbVotes !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbVotes))) {\r",
                  "pm.expect(return_imdbVotes).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Type one of { \"episode\", \"movie\", \"series\" }\r",
                  "pm.test(\"return.Type one of { \\\"episode\\\", \\\"movie\\\", \\\"series\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Type\r",
                  "return_Type \u003d response[\"Type\"];\r",
                  "// Printing value of return_Type variable\r",
                  "console.log(\"Printing value of return_Type\");\r",
                  "console.log(return_Type);\r",
                  "\r",
                  "\r",
                  "if((return_Type !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Type))) {\r",
                  "pm.expect([\"episode\", \"movie\", \"series\"].includes(return_Type)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.DVD)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.DVD)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_DVD\r",
                  "return_DVD \u003d response[\"DVD\"];\r",
                  "// Printing value of return_DVD variable\r",
                  "console.log(\"Printing value of return_DVD\");\r",
                  "console.log(return_DVD);\r",
                  "\r",
                  "\r",
                  "if((return_DVD !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_DVD))) {\r",
                  "pm.expect(return_DVD).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Episode is Numeric\r",
                  "pm.test(\"return.Episode is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Episode\r",
                  "return_Episode \u003d response[\"Episode\"];\r",
                  "// Printing value of return_Episode variable\r",
                  "console.log(\"Printing value of return_Episode\");\r",
                  "console.log(return_Episode);\r",
                  "\r",
                  "\r",
                  "if((return_Episode !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Episode))) {\r",
                  "pm.expect(return_Episode).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Season is Numeric\r",
                  "pm.test(\"return.Season is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Season\r",
                  "return_Season \u003d response[\"Season\"];\r",
                  "// Printing value of return_Season variable\r",
                  "console.log(\"Printing value of return_Season\");\r",
                  "console.log(return_Season);\r",
                  "\r",
                  "\r",
                  "if((return_Season !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Season))) {\r",
                  "pm.expect(return_Season).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.seriesID)\u003d\u003d9\r",
                  "pm.test(\"LENGTH(return.seriesID)\u003d\u003d9\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_seriesID\r",
                  "return_seriesID \u003d response[\"seriesID\"];\r",
                  "// Printing value of return_seriesID variable\r",
                  "console.log(\"Printing value of return_seriesID\");\r",
                  "console.log(return_seriesID);\r",
                  "\r",
                  "\r",
                  "if((return_seriesID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_seriesID))) {\r",
                  "pm.expect(return_seriesID).to.have.length(9);\r",
                  "}\r",
                  "})\r",
                  "// return.totalSeasons is Numeric\r",
                  "pm.test(\"return.totalSeasons is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_totalSeasons\r",
                  "return_totalSeasons \u003d response[\"totalSeasons\"];\r",
                  "// Printing value of return_totalSeasons variable\r",
                  "console.log(\"Printing value of return_totalSeasons\");\r",
                  "console.log(return_totalSeasons);\r",
                  "\r",
                  "\r",
                  "if((return_totalSeasons !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_totalSeasons))) {\r",
                  "pm.expect(return_totalSeasons).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "// 200\u0026Ratings\r",
                  "response_Ratings \u003d response[\"Ratings\"]\r",
                  "if(response_Ratings !\u003d null) {\r",
                  "// Printing value of response_Ratings variable\r",
                  "console.log(\"Printing value of response_Ratings\");\r",
                  "console.log(response_Ratings);\r",
                  "\r",
                  "for(response_Ratings_index in response_Ratings) {\r",
                  "response_Ratings_element \u003d response_Ratings[response_Ratings_index]\r",
                  "// Printing value of response_Ratings_element variable\r",
                  "console.log(\"Printing value of response_Ratings_element\");\r",
                  "console.log(response_Ratings_element);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// return.Source one of { \"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\" }\r",
                  "pm.test(\"return.Source one of { \\\"Internet Movie Database\\\", \\\"Metacritic\\\", \\\"Rotten Tomatoes\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Source\r",
                  "return_Source \u003d response_Ratings_element[\"Source\"];\r",
                  "// Printing value of return_Source variable\r",
                  "console.log(\"Printing value of return_Source\");\r",
                  "console.log(return_Source);\r",
                  "\r",
                  "\r",
                  "if((return_Source !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Source))) {\r",
                  "pm.expect([\"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\"].includes(return_Source)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "} // Closing for response\r",
                  "} // Closing if response\r"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://omdbapi.com/",
              "protocol": "https",
              "host": [
                "omdbapi",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "apikey",
                  "value": "anonymous",
                  "disabled": false
                },
                {
                  "key": "plot",
                  "value": "short",
                  "disabled": false
                },
                {
                  "key": "i",
                  "value": "tt2669746",
                  "disabled": false
                },
                {
                  "key": "y",
                  "value": "2011",
                  "disabled": false
                },
                {
                  "key": "type",
                  "value": "series",
                  "disabled": false
                }
              ],
              "variable": []
            },
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "name": "Mutated0001_Test0002",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Getting value of the t query parameter \r",
                  "input_t \u003d pm.request.url.query.get(\"t\");\r",
                  "if (input_t !\u003d null) { \r",
                  "input_t \u003d decodeURIComponent(input_t);\r",
                  "}\r",
                  "// Printing value of input_t variable\r",
                  "console.log(\"Printing value of input_t\");\r",
                  "console.log(input_t);\r",
                  "\r",
                  "// Getting value of the i query parameter \r",
                  "input_i \u003d pm.request.url.query.get(\"i\");\r",
                  "if (input_i !\u003d null) { \r",
                  "input_i \u003d decodeURIComponent(input_i);\r",
                  "}\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "// Getting value of the type query parameter \r",
                  "input_type \u003d pm.request.url.query.get(\"type\");\r",
                  "if (input_type !\u003d null) { \r",
                  "input_type \u003d decodeURIComponent(input_type);\r",
                  "}\r",
                  "// Printing value of input_type variable\r",
                  "console.log(\"Printing value of input_type\");\r",
                  "console.log(input_type);\r",
                  "\r",
                  "// Getting value of the y query parameter \r",
                  "input_y \u003d pm.request.url.query.get(\"y\");\r",
                  "if (input_y !\u003d null) { \r",
                  "input_y \u003d decodeURIComponent(input_y);\r",
                  "input_y \u003d parseInt(input_y);\r",
                  "}\r",
                  "// Printing value of input_y variable\r",
                  "console.log(\"Printing value of input_y\");\r",
                  "console.log(input_y);\r",
                  "\r",
                  "// Getting value of the plot query parameter \r",
                  "input_plot \u003d pm.request.url.query.get(\"plot\");\r",
                  "if (input_plot !\u003d null) { \r",
                  "input_plot \u003d decodeURIComponent(input_plot);\r",
                  "}\r",
                  "// Printing value of input_plot variable\r",
                  "console.log(\"Printing value of input_plot\");\r",
                  "console.log(input_plot);\r",
                  "\r",
                  "// Getting value of the r query parameter \r",
                  "input_r \u003d pm.request.url.query.get(\"r\");\r",
                  "if (input_r !\u003d null) { \r",
                  "input_r \u003d decodeURIComponent(input_r);\r",
                  "}\r",
                  "// Printing value of input_r variable\r",
                  "console.log(\"Printing value of input_r\");\r",
                  "console.log(input_r);\r",
                  "\r",
                  "valuesToConsiderAsNull \u003d [\"N/A\"];\r",
                  "// \u0026200\r",
                  "response \u003d {\"Title\":\"The Great Gatsby\",\"Year\":\"2013\",\"Rated\":\"PG-13\",\"Released\":\"10 May 2013\",\"Runtime\":\"143 min\",\"Genre\":\"Drama, Romance\",\"Director\":\"Baz Luhrmann\",\"Writer\":\"Baz Luhrmann, Craig Pearce, F. Scott Fitzgerald\",\"Actors\":\"Leonardo DiCaprio, Carey Mulligan, Joel Edgerton\",\"Plot\":\"A writer and wall street trader, Nick, finds himself drawn to the past and lifestyle of his millionaire neighbor, Jay Gatsby.\",\"Language\":\"English\",\"Country\":\"Australia, United States\",\"Awards\":\"j`pKV\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTkxNTk1ODcxNl5BMl5BanBnXkFtZTcwMDI1OTMzOQ@@._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"7.2/10\"},{\"Source\":\"Rotten Tomatoes\",\"Value\":\"48%\"},{\"Source\":\"Metacritic\",\"Value\":\"55/100\"}],\"Metascore\":\"55\",\"imdbRating\":\"7.2\",\"imdbVotes\":\"537,191\",\"imdbID\":\"tt1343092\",\"Type\":\"movie\",\"DVD\":\"27 Aug 2013\",\"BoxOffice\":\"$144,857,996\",\"Production\":\"N/A\",\"Website\":\"N/A\",\"Response\":\"True\"};\r",
                  "// Printing value of response variable\r",
                  "console.log(\"Printing value of response\");\r",
                  "console.log(response);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// input.i \u003d\u003d return.imdbID\r",
                  "pm.test(\"input.i \u003d\u003d return.imdbID\", () \u003d\u003e {\r",
                  "// Getting value of variable: input_i\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "\r",
                  "// Getting value of variable: return_imdbID\r",
                  "return_imdbID \u003d response[\"imdbID\"];\r",
                  "// Printing value of return_imdbID variable\r",
                  "console.log(\"Printing value of return_imdbID\");\r",
                  "console.log(return_imdbID);\r",
                  "\r",
                  "\r",
                  "if((input_i !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(input_i)) \u0026\u0026 (return_imdbID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbID))) {\r",
                  "pm.expect(input_i).to.eql(return_imdbID);\r",
                  "}\r",
                  "})\r",
                  "// return.Response \u003d\u003d \"True\"\r",
                  "pm.test(\"return.Response \u003d\u003d \\\"True\\\"\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect([\"True\"].includes(return_Response)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Response)\u003d\u003d4\r",
                  "pm.test(\"LENGTH(return.Response)\u003d\u003d4\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect(return_Response).to.have.length(4);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Released)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.Released)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Released\r",
                  "return_Released \u003d response[\"Released\"];\r",
                  "// Printing value of return_Released variable\r",
                  "console.log(\"Printing value of return_Released\");\r",
                  "console.log(return_Released);\r",
                  "\r",
                  "\r",
                  "if((return_Released !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Released))) {\r",
                  "pm.expect(return_Released).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Poster is Url\r",
                  "pm.test(\"return.Poster is Url\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Poster\r",
                  "return_Poster \u003d response[\"Poster\"];\r",
                  "// Printing value of return_Poster variable\r",
                  "console.log(\"Printing value of return_Poster\");\r",
                  "console.log(return_Poster);\r",
                  "\r",
                  "\r",
                  "if((return_Poster !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Poster))) {\r",
                  "pm.expect(return_Poster).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Metascore is Numeric\r",
                  "pm.test(\"return.Metascore is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Metascore\r",
                  "return_Metascore \u003d response[\"Metascore\"];\r",
                  "// Printing value of return_Metascore variable\r",
                  "console.log(\"Printing value of return_Metascore\");\r",
                  "console.log(return_Metascore);\r",
                  "\r",
                  "\r",
                  "if((return_Metascore !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Metascore))) {\r",
                  "pm.expect(return_Metascore).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbRating is Numeric\r",
                  "pm.test(\"return.imdbRating is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbRating\r",
                  "return_imdbRating \u003d response[\"imdbRating\"];\r",
                  "// Printing value of return_imdbRating variable\r",
                  "console.log(\"Printing value of return_imdbRating\");\r",
                  "console.log(return_imdbRating);\r",
                  "\r",
                  "\r",
                  "if((return_imdbRating !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbRating))) {\r",
                  "pm.expect(return_imdbRating).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbVotes is Numeric\r",
                  "pm.test(\"return.imdbVotes is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbVotes\r",
                  "return_imdbVotes \u003d response[\"imdbVotes\"];\r",
                  "// Printing value of return_imdbVotes variable\r",
                  "console.log(\"Printing value of return_imdbVotes\");\r",
                  "console.log(return_imdbVotes);\r",
                  "\r",
                  "\r",
                  "if((return_imdbVotes !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbVotes))) {\r",
                  "pm.expect(return_imdbVotes).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Type one of { \"episode\", \"movie\", \"series\" }\r",
                  "pm.test(\"return.Type one of { \\\"episode\\\", \\\"movie\\\", \\\"series\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Type\r",
                  "return_Type \u003d response[\"Type\"];\r",
                  "// Printing value of return_Type variable\r",
                  "console.log(\"Printing value of return_Type\");\r",
                  "console.log(return_Type);\r",
                  "\r",
                  "\r",
                  "if((return_Type !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Type))) {\r",
                  "pm.expect([\"episode\", \"movie\", \"series\"].includes(return_Type)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.DVD)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.DVD)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_DVD\r",
                  "return_DVD \u003d response[\"DVD\"];\r",
                  "// Printing value of return_DVD variable\r",
                  "console.log(\"Printing value of return_DVD\");\r",
                  "console.log(return_DVD);\r",
                  "\r",
                  "\r",
                  "if((return_DVD !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_DVD))) {\r",
                  "pm.expect(return_DVD).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Episode is Numeric\r",
                  "pm.test(\"return.Episode is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Episode\r",
                  "return_Episode \u003d response[\"Episode\"];\r",
                  "// Printing value of return_Episode variable\r",
                  "console.log(\"Printing value of return_Episode\");\r",
                  "console.log(return_Episode);\r",
                  "\r",
                  "\r",
                  "if((return_Episode !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Episode))) {\r",
                  "pm.expect(return_Episode).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Season is Numeric\r",
                  "pm.test(\"return.Season is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Season\r",
                  "return_Season \u003d response[\"Season\"];\r",
                  "// Printing value of return_Season variable\r",
                  "console.log(\"Printing value of return_Season\");\r",
                  "console.log(return_Season);\r",
                  "\r",
                  "\r",
                  "if((return_Season !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Season))) {\r",
                  "pm.expect(return_Season).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.seriesID)\u003d\u003d9\r",
                  "pm.test(\"LENGTH(return.seriesID)\u003d\u003d9\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_seriesID\r",
                  "return_seriesID \u003d response[\"seriesID\"];\r",
                  "// Printing value of return_seriesID variable\r",
                  "console.log(\"Printing value of return_seriesID\");\r",
                  "console.log(return_seriesID);\r",
                  "\r",
                  "\r",
                  "if((return_seriesID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_seriesID))) {\r",
                  "pm.expect(return_seriesID).to.have.length(9);\r",
                  "}\r",
                  "})\r",
                  "// return.totalSeasons is Numeric\r",
                  "pm.test(\"return.totalSeasons is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_totalSeasons\r",
                  "return_totalSeasons \u003d response[\"totalSeasons\"];\r",
                  "// Printing value of return_totalSeasons variable\r",
                  "console.log(\"Printing value of return_totalSeasons\");\r",
                  "console.log(return_totalSeasons);\r",
                  "\r",
                  "\r",
                  "if((return_totalSeasons !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_totalSeasons))) {\r",
                  "pm.expect(return_totalSeasons).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "// 200\u0026Ratings\r",
                  "response_Ratings \u003d response[\"Ratings\"]\r",
                  "if(response_Ratings !\u003d null) {\r",
                  "// Printing value of response_Ratings variable\r",
                  "console.log(\"Printing value of response_Ratings\");\r",
                  "console.log(response_Ratings);\r",
                  "\r",
                  "for(response_Ratings_index in response_Ratings) {\r",
                  "response_Ratings_element \u003d response_Ratings[response_Ratings_index]\r",
                  "// Printing value of response_Ratings_element variable\r",
                  "console.log(\"Printing value of response_Ratings_element\");\r",
                  "console.log(response_Ratings_element);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// return.Source one of { \"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\" }\r",
                  "pm.test(\"return.Source one of { \\\"Internet Movie Database\\\", \\\"Metacritic\\\", \\\"Rotten Tomatoes\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Source\r",
                  "return_Source \u003d response_Ratings_element[\"Source\"];\r",
                  "// Printing value of return_Source variable\r",
                  "console.log(\"Printing value of return_Source\");\r",
                  "console.log(return_Source);\r",
                  "\r",
                  "\r",
                  "if((return_Source !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Source))) {\r",
                  "pm.expect([\"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\"].includes(return_Source)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "} // Closing for response\r",
                  "} // Closing if response\r"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://omdbapi.com/",
              "protocol": "https",
              "host": [
                "omdbapi",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "t",
                  "value": "The Great Gatsby",
                  "disabled": false
                },
                {
                  "key": "apikey",
                  "value": "anonymous",
                  "disabled": false
                },
                {
                  "key": "plot",
                  "value": "short",
                  "disabled": false
                }
              ],
              "variable": []
            },
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "name": "Mutated0001_Test0003",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Getting value of the t query parameter \r",
                  "input_t \u003d pm.request.url.query.get(\"t\");\r",
                  "if (input_t !\u003d null) { \r",
                  "input_t \u003d decodeURIComponent(input_t);\r",
                  "}\r",
                  "// Printing value of input_t variable\r",
                  "console.log(\"Printing value of input_t\");\r",
                  "console.log(input_t);\r",
                  "\r",
                  "// Getting value of the i query parameter \r",
                  "input_i \u003d pm.request.url.query.get(\"i\");\r",
                  "if (input_i !\u003d null) { \r",
                  "input_i \u003d decodeURIComponent(input_i);\r",
                  "}\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "// Getting value of the type query parameter \r",
                  "input_type \u003d pm.request.url.query.get(\"type\");\r",
                  "if (input_type !\u003d null) { \r",
                  "input_type \u003d decodeURIComponent(input_type);\r",
                  "}\r",
                  "// Printing value of input_type variable\r",
                  "console.log(\"Printing value of input_type\");\r",
                  "console.log(input_type);\r",
                  "\r",
                  "// Getting value of the y query parameter \r",
                  "input_y \u003d pm.request.url.query.get(\"y\");\r",
                  "if (input_y !\u003d null) { \r",
                  "input_y \u003d decodeURIComponent(input_y);\r",
                  "input_y \u003d parseInt(input_y);\r",
                  "}\r",
                  "// Printing value of input_y variable\r",
                  "console.log(\"Printing value of input_y\");\r",
                  "console.log(input_y);\r",
                  "\r",
                  "// Getting value of the plot query parameter \r",
                  "input_plot \u003d pm.request.url.query.get(\"plot\");\r",
                  "if (input_plot !\u003d null) { \r",
                  "input_plot \u003d decodeURIComponent(input_plot);\r",
                  "}\r",
                  "// Printing value of input_plot variable\r",
                  "console.log(\"Printing value of input_plot\");\r",
                  "console.log(input_plot);\r",
                  "\r",
                  "// Getting value of the r query parameter \r",
                  "input_r \u003d pm.request.url.query.get(\"r\");\r",
                  "if (input_r !\u003d null) { \r",
                  "input_r \u003d decodeURIComponent(input_r);\r",
                  "}\r",
                  "// Printing value of input_r variable\r",
                  "console.log(\"Printing value of input_r\");\r",
                  "console.log(input_r);\r",
                  "\r",
                  "valuesToConsiderAsNull \u003d [\"N/A\"];\r",
                  "// \u0026200\r",
                  "response \u003d {\"Title\":\"The Movement\",\"Year\":\"2015\",\"Rated\":\"N/A\",\"Released\":\"03 Mar 2016\",\"Runtime\":\"70min\",\"Genre\":\"Drama\",\"Director\":\"Benjamín Naishtat\",\"Writer\":\"Benjamín Naishtat\",\"Actors\":\"Pablo Cedrón, Céline Latil, Francisco Lumerman\",\"Plot\":\"During the first half of the 19th century in a vast and desolated land fallen into anarchy, several armed groups drift along the infinite Pampas demanding support and food from the peasants.\",\"Language\":\"Spanish\",\"Country\":\"Argentina, South Korea\",\"Awards\":\"3 wins \u0026 2 nominations\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMjNhYjUwMmItZGQ2Mi00NzhhLThhMWItNzI2MjAwZDk5YWRmXkEyXkFqcGdeQXVyNjU4NTgwNDQ@._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"6.0/10\"}],\"Metascore\":\"N/A\",\"imdbRating\":\"6.0\",\"imdbVotes\":\"150\",\"imdbID\":\"tt4691974\",\"Type\":\"movie\",\"DVD\":\"N/A\",\"BoxOffice\":\"N/A\",\"Production\":\"N/A\",\"Website\":\"N/A\",\"Response\":\"True\"};\r",
                  "// Printing value of response variable\r",
                  "console.log(\"Printing value of response\");\r",
                  "console.log(response);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// input.i \u003d\u003d return.imdbID\r",
                  "pm.test(\"input.i \u003d\u003d return.imdbID\", () \u003d\u003e {\r",
                  "// Getting value of variable: input_i\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "\r",
                  "// Getting value of variable: return_imdbID\r",
                  "return_imdbID \u003d response[\"imdbID\"];\r",
                  "// Printing value of return_imdbID variable\r",
                  "console.log(\"Printing value of return_imdbID\");\r",
                  "console.log(return_imdbID);\r",
                  "\r",
                  "\r",
                  "if((input_i !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(input_i)) \u0026\u0026 (return_imdbID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbID))) {\r",
                  "pm.expect(input_i).to.eql(return_imdbID);\r",
                  "}\r",
                  "})\r",
                  "// return.Response \u003d\u003d \"True\"\r",
                  "pm.test(\"return.Response \u003d\u003d \\\"True\\\"\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect([\"True\"].includes(return_Response)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Response)\u003d\u003d4\r",
                  "pm.test(\"LENGTH(return.Response)\u003d\u003d4\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect(return_Response).to.have.length(4);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Released)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.Released)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Released\r",
                  "return_Released \u003d response[\"Released\"];\r",
                  "// Printing value of return_Released variable\r",
                  "console.log(\"Printing value of return_Released\");\r",
                  "console.log(return_Released);\r",
                  "\r",
                  "\r",
                  "if((return_Released !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Released))) {\r",
                  "pm.expect(return_Released).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Poster is Url\r",
                  "pm.test(\"return.Poster is Url\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Poster\r",
                  "return_Poster \u003d response[\"Poster\"];\r",
                  "// Printing value of return_Poster variable\r",
                  "console.log(\"Printing value of return_Poster\");\r",
                  "console.log(return_Poster);\r",
                  "\r",
                  "\r",
                  "if((return_Poster !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Poster))) {\r",
                  "pm.expect(return_Poster).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Metascore is Numeric\r",
                  "pm.test(\"return.Metascore is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Metascore\r",
                  "return_Metascore \u003d response[\"Metascore\"];\r",
                  "// Printing value of return_Metascore variable\r",
                  "console.log(\"Printing value of return_Metascore\");\r",
                  "console.log(return_Metascore);\r",
                  "\r",
                  "\r",
                  "if((return_Metascore !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Metascore))) {\r",
                  "pm.expect(return_Metascore).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbRating is Numeric\r",
                  "pm.test(\"return.imdbRating is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbRating\r",
                  "return_imdbRating \u003d response[\"imdbRating\"];\r",
                  "// Printing value of return_imdbRating variable\r",
                  "console.log(\"Printing value of return_imdbRating\");\r",
                  "console.log(return_imdbRating);\r",
                  "\r",
                  "\r",
                  "if((return_imdbRating !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbRating))) {\r",
                  "pm.expect(return_imdbRating).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbVotes is Numeric\r",
                  "pm.test(\"return.imdbVotes is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbVotes\r",
                  "return_imdbVotes \u003d response[\"imdbVotes\"];\r",
                  "// Printing value of return_imdbVotes variable\r",
                  "console.log(\"Printing value of return_imdbVotes\");\r",
                  "console.log(return_imdbVotes);\r",
                  "\r",
                  "\r",
                  "if((return_imdbVotes !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbVotes))) {\r",
                  "pm.expect(return_imdbVotes).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Type one of { \"episode\", \"movie\", \"series\" }\r",
                  "pm.test(\"return.Type one of { \\\"episode\\\", \\\"movie\\\", \\\"series\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Type\r",
                  "return_Type \u003d response[\"Type\"];\r",
                  "// Printing value of return_Type variable\r",
                  "console.log(\"Printing value of return_Type\");\r",
                  "console.log(return_Type);\r",
                  "\r",
                  "\r",
                  "if((return_Type !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Type))) {\r",
                  "pm.expect([\"episode\", \"movie\", \"series\"].includes(return_Type)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.DVD)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.DVD)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_DVD\r",
                  "return_DVD \u003d response[\"DVD\"];\r",
                  "// Printing value of return_DVD variable\r",
                  "console.log(\"Printing value of return_DVD\");\r",
                  "console.log(return_DVD);\r",
                  "\r",
                  "\r",
                  "if((return_DVD !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_DVD))) {\r",
                  "pm.expect(return_DVD).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Episode is Numeric\r",
                  "pm.test(\"return.Episode is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Episode\r",
                  "return_Episode \u003d response[\"Episode\"];\r",
                  "// Printing value of return_Episode variable\r",
                  "console.log(\"Printing value of return_Episode\");\r",
                  "console.log(return_Episode);\r",
                  "\r",
                  "\r",
                  "if((return_Episode !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Episode))) {\r",
                  "pm.expect(return_Episode).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Season is Numeric\r",
                  "pm.test(\"return.Season is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Season\r",
                  "return_Season \u003d response[\"Season\"];\r",
                  "// Printing value of return_Season variable\r",
                  "console.log(\"Printing value of return_Season\");\r",
                  "console.log(return_Season);\r",
                  "\r",
                  "\r",
                  "if((return_Season !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Season))) {\r",
                  "pm.expect(return_Season).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.seriesID)\u003d\u003d9\r",
                  "pm.test(\"LENGTH(return.seriesID)\u003d\u003d9\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_seriesID\r",
                  "return_seriesID \u003d response[\"seriesID\"];\r",
                  "// Printing value of return_seriesID variable\r",
                  "console.log(\"Printing value of return_seriesID\");\r",
                  "console.log(return_seriesID);\r",
                  "\r",
                  "\r",
                  "if((return_seriesID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_seriesID))) {\r",
                  "pm.expect(return_seriesID).to.have.length(9);\r",
                  "}\r",
                  "})\r",
                  "// return.totalSeasons is Numeric\r",
                  "pm.test(\"return.totalSeasons is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_totalSeasons\r",
                  "return_totalSeasons \u003d response[\"totalSeasons\"];\r",
                  "// Printing value of return_totalSeasons variable\r",
                  "console.log(\"Printing value of return_totalSeasons\");\r",
                  "console.log(return_totalSeasons);\r",
                  "\r",
                  "\r",
                  "if((return_totalSeasons !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_totalSeasons))) {\r",
                  "pm.expect(return_totalSeasons).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "// 200\u0026Ratings\r",
                  "response_Ratings \u003d response[\"Ratings\"]\r",
                  "if(response_Ratings !\u003d null) {\r",
                  "// Printing value of response_Ratings variable\r",
                  "console.log(\"Printing value of response_Ratings\");\r",
                  "console.log(response_Ratings);\r",
                  "\r",
                  "for(response_Ratings_index in response_Ratings) {\r",
                  "response_Ratings_element \u003d response_Ratings[response_Ratings_index]\r",
                  "// Printing value of response_Ratings_element variable\r",
                  "console.log(\"Printing value of response_Ratings_element\");\r",
                  "console.log(response_Ratings_element);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// return.Source one of { \"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\" }\r",
                  "pm.test(\"return.Source one of { \\\"Internet Movie Database\\\", \\\"Metacritic\\\", \\\"Rotten Tomatoes\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Source\r",
                  "return_Source \u003d response_Ratings_element[\"Source\"];\r",
                  "// Printing value of return_Source variable\r",
                  "console.log(\"Printing value of return_Source\");\r",
                  "console.log(return_Source);\r",
                  "\r",
                  "\r",
                  "if((return_Source !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Source))) {\r",
                  "pm.expect([\"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\"].includes(return_Source)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "} // Closing for response\r",
                  "} // Closing if response\r"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://omdbapi.com/",
              "protocol": "https",
              "host": [
                "omdbapi",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "t",
                  "value": "The Movement",
                  "disabled": false
                },
                {
                  "key": "apikey",
                  "value": "anonymous",
                  "disabled": false
                },
                {
                  "key": "type",
                  "value": "movie",
                  "disabled": false
                }
              ],
              "variable": []
            },
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "name": "Mutated0001_Test0004",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Getting value of the t query parameter \r",
                  "input_t \u003d pm.request.url.query.get(\"t\");\r",
                  "if (input_t !\u003d null) { \r",
                  "input_t \u003d decodeURIComponent(input_t);\r",
                  "}\r",
                  "// Printing value of input_t variable\r",
                  "console.log(\"Printing value of input_t\");\r",
                  "console.log(input_t);\r",
                  "\r",
                  "// Getting value of the i query parameter \r",
                  "input_i \u003d pm.request.url.query.get(\"i\");\r",
                  "if (input_i !\u003d null) { \r",
                  "input_i \u003d decodeURIComponent(input_i);\r",
                  "}\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "// Getting value of the type query parameter \r",
                  "input_type \u003d pm.request.url.query.get(\"type\");\r",
                  "if (input_type !\u003d null) { \r",
                  "input_type \u003d decodeURIComponent(input_type);\r",
                  "}\r",
                  "// Printing value of input_type variable\r",
                  "console.log(\"Printing value of input_type\");\r",
                  "console.log(input_type);\r",
                  "\r",
                  "// Getting value of the y query parameter \r",
                  "input_y \u003d pm.request.url.query.get(\"y\");\r",
                  "if (input_y !\u003d null) { \r",
                  "input_y \u003d decodeURIComponent(input_y);\r",
                  "input_y \u003d parseInt(input_y);\r",
                  "}\r",
                  "// Printing value of input_y variable\r",
                  "console.log(\"Printing value of input_y\");\r",
                  "console.log(input_y);\r",
                  "\r",
                  "// Getting value of the plot query parameter \r",
                  "input_plot \u003d pm.request.url.query.get(\"plot\");\r",
                  "if (input_plot !\u003d null) { \r",
                  "input_plot \u003d decodeURIComponent(input_plot);\r",
                  "}\r",
                  "// Printing value of input_plot variable\r",
                  "console.log(\"Printing value of input_plot\");\r",
                  "console.log(input_plot);\r",
                  "\r",
                  "// Getting value of the r query parameter \r",
                  "input_r \u003d pm.request.url.query.get(\"r\");\r",
                  "if (input_r !\u003d null) { \r",
                  "input_r \u003d decodeURIComponent(input_r);\r",
                  "}\r",
                  "// Printing value of input_r variable\r",
                  "console.log(\"Printing value of input_r\");\r",
                  "console.log(input_r);\r",
                  "\r",
                  "valuesToConsiderAsNull \u003d [\"N/A\"];\r",
                  "// \u0026200\r",
                  "response \u003d {\"Title\":\"Interstellar\",\"Year\":\"2014\",\"Rated\":\"PG-13\",\"Released\":\"07 Nov 2014\",\"Runtime\":\"169 min\",\"Genre\":\"Adventure, Drama, Sci-Fi\",\"Director\":\"Christopher Nolan\",\"Writer\":\"Jonathan Nolan, Christopher Nolan\",\"Actors\":\"Matthew McConaughey, Anne Hathaway, Jessica Chastain\",\"Plot\":\"A team of explorers travel through a wormhole in space in an attempt to ensure humanity\u0027s survival.\",\"Language\":\"English\",\"Country\":\"United States, United Kingdom, Canada\",\"Awards\":\"Won 1 Oscar. 44 wins \u0026 148 nominations total\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BZjdkOTU3MDktN2IxOS00OGEyLWFmMjktY2FiMmZkNWIyODZiXkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_SX300.jpg\",\"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"8.6/10\"},{\"Source\":\"Rotten TomQatoes\",\"Value\":\"73%\"},{\"Source\":\"Metacritic\",\"Value\":\"74/100\"}],\"Metascore\":\"74\",\"imdbRating\":\"8.6\",\"imdbVotes\":\"1,774,128\",\"imdbID\":\"tt0816692\",\"Type\":\"movie\",\"DVD\":\"31 Mar 2015\",\"BoxOffice\":\"$188,020,017\",\"Production\":\"N/A\",\"Website\":\"N/A\",\"Response\":\"True\"};\r",
                  "// Printing value of response variable\r",
                  "console.log(\"Printing value of response\");\r",
                  "console.log(response);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// input.i \u003d\u003d return.imdbID\r",
                  "pm.test(\"input.i \u003d\u003d return.imdbID\", () \u003d\u003e {\r",
                  "// Getting value of variable: input_i\r",
                  "// Printing value of input_i variable\r",
                  "console.log(\"Printing value of input_i\");\r",
                  "console.log(input_i);\r",
                  "\r",
                  "\r",
                  "// Getting value of variable: return_imdbID\r",
                  "return_imdbID \u003d response[\"imdbID\"];\r",
                  "// Printing value of return_imdbID variable\r",
                  "console.log(\"Printing value of return_imdbID\");\r",
                  "console.log(return_imdbID);\r",
                  "\r",
                  "\r",
                  "if((input_i !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(input_i)) \u0026\u0026 (return_imdbID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbID))) {\r",
                  "pm.expect(input_i).to.eql(return_imdbID);\r",
                  "}\r",
                  "})\r",
                  "// return.Response \u003d\u003d \"True\"\r",
                  "pm.test(\"return.Response \u003d\u003d \\\"True\\\"\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect([\"True\"].includes(return_Response)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Response)\u003d\u003d4\r",
                  "pm.test(\"LENGTH(return.Response)\u003d\u003d4\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Response\r",
                  "return_Response \u003d response[\"Response\"];\r",
                  "// Printing value of return_Response variable\r",
                  "console.log(\"Printing value of return_Response\");\r",
                  "console.log(return_Response);\r",
                  "\r",
                  "\r",
                  "if((return_Response !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Response))) {\r",
                  "pm.expect(return_Response).to.have.length(4);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.Released)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.Released)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Released\r",
                  "return_Released \u003d response[\"Released\"];\r",
                  "// Printing value of return_Released variable\r",
                  "console.log(\"Printing value of return_Released\");\r",
                  "console.log(return_Released);\r",
                  "\r",
                  "\r",
                  "if((return_Released !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Released))) {\r",
                  "pm.expect(return_Released).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Poster is Url\r",
                  "pm.test(\"return.Poster is Url\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Poster\r",
                  "return_Poster \u003d response[\"Poster\"];\r",
                  "// Printing value of return_Poster variable\r",
                  "console.log(\"Printing value of return_Poster\");\r",
                  "console.log(return_Poster);\r",
                  "\r",
                  "\r",
                  "if((return_Poster !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Poster))) {\r",
                  "pm.expect(return_Poster).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Metascore is Numeric\r",
                  "pm.test(\"return.Metascore is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Metascore\r",
                  "return_Metascore \u003d response[\"Metascore\"];\r",
                  "// Printing value of return_Metascore variable\r",
                  "console.log(\"Printing value of return_Metascore\");\r",
                  "console.log(return_Metascore);\r",
                  "\r",
                  "\r",
                  "if((return_Metascore !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Metascore))) {\r",
                  "pm.expect(return_Metascore).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbRating is Numeric\r",
                  "pm.test(\"return.imdbRating is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbRating\r",
                  "return_imdbRating \u003d response[\"imdbRating\"];\r",
                  "// Printing value of return_imdbRating variable\r",
                  "console.log(\"Printing value of return_imdbRating\");\r",
                  "console.log(return_imdbRating);\r",
                  "\r",
                  "\r",
                  "if((return_imdbRating !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbRating))) {\r",
                  "pm.expect(return_imdbRating).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.imdbVotes is Numeric\r",
                  "pm.test(\"return.imdbVotes is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_imdbVotes\r",
                  "return_imdbVotes \u003d response[\"imdbVotes\"];\r",
                  "// Printing value of return_imdbVotes variable\r",
                  "console.log(\"Printing value of return_imdbVotes\");\r",
                  "console.log(return_imdbVotes);\r",
                  "\r",
                  "\r",
                  "if((return_imdbVotes !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_imdbVotes))) {\r",
                  "pm.expect(return_imdbVotes).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Type one of { \"episode\", \"movie\", \"series\" }\r",
                  "pm.test(\"return.Type one of { \\\"episode\\\", \\\"movie\\\", \\\"series\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Type\r",
                  "return_Type \u003d response[\"Type\"];\r",
                  "// Printing value of return_Type variable\r",
                  "console.log(\"Printing value of return_Type\");\r",
                  "console.log(return_Type);\r",
                  "\r",
                  "\r",
                  "if((return_Type !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Type))) {\r",
                  "pm.expect([\"episode\", \"movie\", \"series\"].includes(return_Type)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.DVD)\u003d\u003d11\r",
                  "pm.test(\"LENGTH(return.DVD)\u003d\u003d11\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_DVD\r",
                  "return_DVD \u003d response[\"DVD\"];\r",
                  "// Printing value of return_DVD variable\r",
                  "console.log(\"Printing value of return_DVD\");\r",
                  "console.log(return_DVD);\r",
                  "\r",
                  "\r",
                  "if((return_DVD !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_DVD))) {\r",
                  "pm.expect(return_DVD).to.have.length(11);\r",
                  "}\r",
                  "})\r",
                  "// return.Episode is Numeric\r",
                  "pm.test(\"return.Episode is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Episode\r",
                  "return_Episode \u003d response[\"Episode\"];\r",
                  "// Printing value of return_Episode variable\r",
                  "console.log(\"Printing value of return_Episode\");\r",
                  "console.log(return_Episode);\r",
                  "\r",
                  "\r",
                  "if((return_Episode !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Episode))) {\r",
                  "pm.expect(return_Episode).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// return.Season is Numeric\r",
                  "pm.test(\"return.Season is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Season\r",
                  "return_Season \u003d response[\"Season\"];\r",
                  "// Printing value of return_Season variable\r",
                  "console.log(\"Printing value of return_Season\");\r",
                  "console.log(return_Season);\r",
                  "\r",
                  "\r",
                  "if((return_Season !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Season))) {\r",
                  "pm.expect(return_Season).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "// LENGTH(return.seriesID)\u003d\u003d9\r",
                  "pm.test(\"LENGTH(return.seriesID)\u003d\u003d9\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_seriesID\r",
                  "return_seriesID \u003d response[\"seriesID\"];\r",
                  "// Printing value of return_seriesID variable\r",
                  "console.log(\"Printing value of return_seriesID\");\r",
                  "console.log(return_seriesID);\r",
                  "\r",
                  "\r",
                  "if((return_seriesID !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_seriesID))) {\r",
                  "pm.expect(return_seriesID).to.have.length(9);\r",
                  "}\r",
                  "})\r",
                  "// return.totalSeasons is Numeric\r",
                  "pm.test(\"return.totalSeasons is Numeric\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_totalSeasons\r",
                  "return_totalSeasons \u003d response[\"totalSeasons\"];\r",
                  "// Printing value of return_totalSeasons variable\r",
                  "console.log(\"Printing value of return_totalSeasons\");\r",
                  "console.log(return_totalSeasons);\r",
                  "\r",
                  "\r",
                  "if((return_totalSeasons !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_totalSeasons))) {\r",
                  "pm.expect(return_totalSeasons).to.match(/^[+-]{0,1}(0|([1-9](\\d*|\\d{0,2}(,\\d{3})*)))?(\\.\\d*[0-9])?$/);\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "// 200\u0026Ratings\r",
                  "response_Ratings \u003d response[\"Ratings\"]\r",
                  "if(response_Ratings !\u003d null) {\r",
                  "// Printing value of response_Ratings variable\r",
                  "console.log(\"Printing value of response_Ratings\");\r",
                  "console.log(response_Ratings);\r",
                  "\r",
                  "for(response_Ratings_index in response_Ratings) {\r",
                  "response_Ratings_element \u003d response_Ratings[response_Ratings_index]\r",
                  "// Printing value of response_Ratings_element variable\r",
                  "console.log(\"Printing value of response_Ratings_element\");\r",
                  "console.log(response_Ratings_element);\r",
                  "\r",
                  "// Invariants of this nesting level:\r",
                  "// return.Source one of { \"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\" }\r",
                  "pm.test(\"return.Source one of { \\\"Internet Movie Database\\\", \\\"Metacritic\\\", \\\"Rotten Tomatoes\\\" }\", () \u003d\u003e {\r",
                  "// Getting value of variable: return_Source\r",
                  "return_Source \u003d response_Ratings_element[\"Source\"];\r",
                  "// Printing value of return_Source variable\r",
                  "console.log(\"Printing value of return_Source\");\r",
                  "console.log(return_Source);\r",
                  "\r",
                  "\r",
                  "if((return_Source !\u003d null) \u0026\u0026 (!valuesToConsiderAsNull.includes(return_Source))) {\r",
                  "pm.expect([\"Internet Movie Database\", \"Metacritic\", \"Rotten Tomatoes\"].includes(return_Source)).to.be.true;\r",
                  "}\r",
                  "})\r",
                  "\r",
                  "} // Closing for response\r",
                  "} // Closing if response\r"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://omdbapi.com/",
              "protocol": "https",
              "host": [
                "omdbapi",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "r",
                  "value": "json",
                  "disabled": false
                },
                {
                  "key": "apikey",
                  "value": "anonymous",
                  "disabled": false
                },
                {
                  "key": "i",
                  "value": "tt0816692",
                  "disabled": false
                }
              ],
              "variable": []
            },
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ]
    }
  ]
}