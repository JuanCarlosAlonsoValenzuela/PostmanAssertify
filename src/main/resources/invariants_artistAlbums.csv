pptname;invariant;invariantType;variables;postmanAssertion;tp;fp;enter;bug
/artists/{id}/albums&getArtistAlbums&200&items&artists():::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));pm.expect(input_include_groups_size_array).to.be.at.least(1);0;0;1;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;LENGTH(return.href)==57;daikon.inv.unary.string.FixedLengthString;(return.href);pm.expect(return_href).to.have.length(57);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);pm.expect(return_href).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);pm.expect(return_id).to.have.length(22);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;"return.type == ""artist""";daikon.inv.unary.string.OneOfString;(return.type);"pm.expect([""artist""].includes(return_type)).to.be.true";1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;LENGTH(return.type)==6;daikon.inv.unary.string.FixedLengthString;(return.type);pm.expect(return_type).to.have.length(6);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;LENGTH(return.uri)==37;daikon.inv.unary.string.FixedLengthString;(return.uri);pm.expect(return_uri).to.have.length(37);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));pm.expect(input_include_groups_size_array).to.be.at.least(1);0;0;1;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id);pm.expect(return_href.includes(return_id)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type);pm.expect(return_href.includes(return_type)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri);pm.expect(return_uri.includes(return_id)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&artists():::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri);pm.expect(return_uri.includes(return_type)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&images():::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));pm.expect(input_include_groups_size_array).to.be.at.least(1);0;0;1;0
/artists/{id}/albums&getArtistAlbums&200&items&images():::EXIT;return.height == return.width;daikon.inv.binary.twoScalar.IntEqual;(return.height, return.width);pm.expect(return_height).to.eql(return_width);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&images():::EXIT;return.height one of { 64, 300, 640 };daikon.inv.unary.scalar.OneOfScalar;(return.height);pm.expect([64, 300, 640].includes(return_height)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&images():::EXIT;LENGTH(return.url)==64;daikon.inv.unary.string.FixedLengthString;(return.url);pm.expect(return_url).to.have.length(64);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&images():::EXIT;return.url is Url;daikon.inv.unary.string.IsUrl;(return.url);pm.expect(return_url).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items&images():::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));pm.expect(input_include_groups_size_array).to.be.at.least(1);0;0;1;0
/artists/{id}/albums&getArtistAlbums&200&items():::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));pm.expect(input_include_groups_size_array).to.be.at.least(1);0;0;1;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;"return.album_type one of { ""album"", ""compilation"", ""single"" }";daikon.inv.unary.string.OneOfString;(return.album_type);"pm.expect([""album"", ""compilation"", ""single""].includes(return_album_type)).to.be.true";1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;All the elements of return.available_markets[] have LENGTH=2;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(return.available_markets[..]);pm.expect(return_available_markets_array.every(element => element.length === 2)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;LENGTH(return.href)==56;daikon.inv.unary.string.FixedLengthString;(return.href);pm.expect(return_href).to.have.length(56);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);pm.expect(return_href).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);pm.expect(return_id).to.have.length(22);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;"return.type == ""album""";daikon.inv.unary.string.OneOfString;(return.type);"pm.expect([""album""].includes(return_type)).to.be.true";1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;LENGTH(return.type)==5;daikon.inv.unary.string.FixedLengthString;(return.type);pm.expect(return_type).to.have.length(5);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;LENGTH(return.uri)==36;daikon.inv.unary.string.FixedLengthString;(return.uri);pm.expect(return_uri).to.have.length(36);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;"return.release_date_precision one of { ""day"", ""month"", ""year"" }";daikon.inv.unary.string.OneOfString;(return.release_date_precision);"pm.expect([""day"", ""month"", ""year""].includes(return_release_date_precision)).to.be.true";1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;return.total_tracks >= 1;daikon.inv.unary.scalar.LowerBound;(return.total_tracks);pm.expect(return_total_tracks).to.be.at.least(1);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));pm.expect(input_include_groups_size_array).to.be.at.least(1);0;0;1;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;size(return.available_markets[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.available_markets[..]));pm.expect(return_available_markets_size_array).to.be.at.least(1);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;size(return.images[]) one of { 1, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(return.images[..]));pm.expect([1, 3, 0].includes(return_images_size_array)).to.be.true;0;1;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;size(return.artists[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.artists[..]));pm.expect(return_artists_size_array).to.be.at.least(1);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;return.album_group in input.include_groups[];daikon.inv.binary.sequenceString.MemberString;(input.include_groups[..], return.album_group);pm.expect(input_include_groups_array.includes(return_album_group)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id);pm.expect(return_href.includes(return_id)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type);pm.expect(return_href.includes(return_type)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri);pm.expect(return_uri.includes(return_id)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200&items():::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri);pm.expect(return_uri.includes(return_type)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));pm.expect(input_include_groups_size_array).to.be.at.least(1);0;0;1;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;input.limit == return.limit;daikon.inv.binary.twoScalar.IntEqual;(input.limit, return.limit);pm.expect(input_limit).to.eql(return_limit);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;input.offset == return.offset;daikon.inv.binary.twoScalar.IntEqual;(input.offset, return.offset);pm.expect(input_offset).to.eql(return_offset);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);pm.expect(return_href).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;return.limit >= 1;daikon.inv.unary.scalar.LowerBound;(return.limit);pm.expect(return_limit).to.be.at.least(1);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;return.next is Url;daikon.inv.unary.string.IsUrl;(return.next);pm.expect(return_next).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;return.offset >= 0;daikon.inv.unary.scalar.LowerBound;(return.offset);pm.expect(return_offset).to.be.at.least(0);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;return.previous is Url;daikon.inv.unary.string.IsUrl;(return.previous);pm.expect(return_previous).to.match(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[\w\u00a1-\uffff0-9]+-?)*[\w\u00a1-\uffff0-9]+)(?:\.(?:[\w\u00a1-\uffff0-9]+-)*[\w\u00a1-\uffff0-9]+)*(?:\.(?:[a-zA-Z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;return.total >= 0;daikon.inv.unary.scalar.LowerBound;(return.total);pm.expect(return_total).to.be.at.least(0);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));pm.expect(input_include_groups_size_array).to.be.at.least(1);0;0;1;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;input.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.href);pm.expect(return_href.includes(input_id)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;input.id is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.next);pm.expect(return_next.includes(input_id)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;input.id is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.previous);pm.expect(return_previous.includes(input_id)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;input.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.items[..]));pm.expect(input_limit).to.be.at.least(return_items_size_array);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;input.market is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.href);pm.expect(return_href.includes(input_market)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;input.market is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.next);pm.expect(return_next.includes(input_market)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;input.market is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.previous);pm.expect(return_previous.includes(input_market)).to.be.true;1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;return.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, size(return.items[..]));pm.expect(return_limit).to.be.at.least(return_items_size_array);1;0;0;0
/artists/{id}/albums&getArtistAlbums&200():::EXIT;return.total >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.items[..]));pm.expect(return_total).to.be.at.least(return_items_size_array);1;0;0;0