{
  "info": {
    "name": "Spotify",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "/artists/{id}/albums",
      "item": [
        {
          "name": "getArtistAlbums_200",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\u0027use strict\u0027;\r",
                  "input_id \u003d pm.request.url.path[2];\r",
                  "if (input_id !\u003d null) {\r",
                  "  input_id \u003d decodeURIComponent(input_id);\r",
                  "}\r",
                  "input_limit \u003d pm.request.url.query.get(\"limit\");\r",
                  "if (input_limit !\u003d null) {\r",
                  "  input_limit \u003d decodeURIComponent(input_limit);\r",
                  "  input_limit \u003d parseInt(input_limit);\r",
                  "}\r",
                  "input_offset \u003d pm.request.url.query.get(\"offset\");\r",
                  "if (input_offset !\u003d null) {\r",
                  "  input_offset \u003d decodeURIComponent(input_offset);\r",
                  "  input_offset \u003d parseInt(input_offset);\r",
                  "}\r",
                  "input_include_groups_array \u003d pm.request.url.query.get(\"include_groups\");\r",
                  "if (input_include_groups_array !\u003d null) {\r",
                  "  input_include_groups_array \u003d decodeURIComponent(input_include_groups_array);\r",
                  "  input_include_groups_array \u003d input_include_groups_array.split(\",\").map(item \u003d\u003e item.trim());\r",
                  "}\r",
                  "input_market \u003d pm.request.url.query.get(\"market\");\r",
                  "if (input_market !\u003d null) {\r",
                  "  input_market \u003d decodeURIComponent(input_market);\r",
                  "}\r",
                  "input_booleanProperty \u003d pm.request.url.query.get(\"booleanProperty\");\r",
                  "if (input_booleanProperty !\u003d null) {\r",
                  "  input_booleanProperty \u003d decodeURIComponent(input_booleanProperty);\r",
                  "  input_booleanProperty \u003d input_booleanProperty \u003d\u003d \"true\";\r",
                  "}\r",
                  "valuesToConsiderAsNull \u003d [];\r",
                  "response \u003d pm.response.json();\r",
                  "pm.test(\"input.limit \\x3d\\x3d return.limit\", () \u003d\u003e {\r",
                  "  return_limit \u003d response[\"limit\"];\r",
                  "  if (input_limit !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_limit) \u0026\u0026 return_limit !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_limit)) {\r",
                  "    pm.expect(input_limit).to.eql(return_limit);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"input.offset \\x3d\\x3d return.offset\", () \u003d\u003e {\r",
                  "  return_offset \u003d response[\"offset\"];\r",
                  "  if (input_offset !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_offset) \u0026\u0026 return_offset !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_offset)) {\r",
                  "    pm.expect(input_offset).to.eql(return_offset);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"return.href is Url\", () \u003d\u003e {\r",
                  "  return_href \u003d response[\"href\"];\r",
                  "  if (return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href)) {\r",
                  "    pm.expect(return_href).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"return.limit \\x3e\\x3d 1\", () \u003d\u003e {\r",
                  "  return_limit \u003d response[\"limit\"];\r",
                  "  if (return_limit !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_limit)) {\r",
                  "    pm.expect(return_limit).to.be.at.least(1);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"return.next is Url\", () \u003d\u003e {\r",
                  "  return_next \u003d response[\"next\"];\r",
                  "  if (return_next !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_next)) {\r",
                  "    pm.expect(return_next).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"return.offset \\x3e\\x3d 0\", () \u003d\u003e {\r",
                  "  return_offset \u003d response[\"offset\"];\r",
                  "  if (return_offset !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_offset)) {\r",
                  "    pm.expect(return_offset).to.be.at.least(0);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"return.previous is Url\", () \u003d\u003e {\r",
                  "  return_previous \u003d response[\"previous\"];\r",
                  "  if (return_previous !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_previous)) {\r",
                  "    pm.expect(return_previous).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"return.total \\x3e\\x3d 0\", () \u003d\u003e {\r",
                  "  return_total \u003d response[\"total\"];\r",
                  "  if (return_total !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_total)) {\r",
                  "    pm.expect(return_total).to.be.at.least(0);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"input.id is a substring of return.href\", () \u003d\u003e {\r",
                  "  return_href \u003d response[\"href\"];\r",
                  "  if (input_id !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_id) \u0026\u0026 return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href)) {\r",
                  "    pm.expect(return_href.includes(input_id)).to.be.true;\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"input.id is a substring of return.next\", () \u003d\u003e {\r",
                  "  return_next \u003d response[\"next\"];\r",
                  "  if (input_id !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_id) \u0026\u0026 return_next !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_next)) {\r",
                  "    pm.expect(return_next.includes(input_id)).to.be.true;\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"input.id is a substring of return.previous\", () \u003d\u003e {\r",
                  "  return_previous \u003d response[\"previous\"];\r",
                  "  if (input_id !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_id) \u0026\u0026 return_previous !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_previous)) {\r",
                  "    pm.expect(return_previous.includes(input_id)).to.be.true;\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"input.limit \\x3e\\x3d size(return.items[])\", () \u003d\u003e {\r",
                  "  return_items_size_array \u003d response[\"items\"];\r",
                  "  if (return_items_size_array !\u003d null) {\r",
                  "    return_items_size_array \u003d return_items_size_array.length;\r",
                  "  }\r",
                  "  if (input_limit !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_limit) \u0026\u0026 return_items_size_array !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_items_size_array)) {\r",
                  "    pm.expect(input_limit).to.be.at.least(return_items_size_array);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"input.market is a substring of return.href\", () \u003d\u003e {\r",
                  "  return_href \u003d response[\"href\"];\r",
                  "  if (input_market !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_market) \u0026\u0026 return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href)) {\r",
                  "    pm.expect(return_href.includes(input_market)).to.be.true;\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"input.market is a substring of return.next\", () \u003d\u003e {\r",
                  "  return_next \u003d response[\"next\"];\r",
                  "  if (input_market !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_market) \u0026\u0026 return_next !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_next)) {\r",
                  "    pm.expect(return_next.includes(input_market)).to.be.true;\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"input.market is a substring of return.previous\", () \u003d\u003e {\r",
                  "  return_previous \u003d response[\"previous\"];\r",
                  "  if (input_market !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_market) \u0026\u0026 return_previous !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_previous)) {\r",
                  "    pm.expect(return_previous.includes(input_market)).to.be.true;\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"return.limit \\x3e\\x3d size(return.items[])\", () \u003d\u003e {\r",
                  "  return_limit \u003d response[\"limit\"];\r",
                  "  return_items_size_array \u003d response[\"items\"];\r",
                  "  if (return_items_size_array !\u003d null) {\r",
                  "    return_items_size_array \u003d return_items_size_array.length;\r",
                  "  }\r",
                  "  if (return_limit !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_limit) \u0026\u0026 return_items_size_array !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_items_size_array)) {\r",
                  "    pm.expect(return_limit).to.be.at.least(return_items_size_array);\r",
                  "  }\r",
                  "});\r",
                  "pm.test(\"return.total \\x3e\\x3d size(return.items[])\", () \u003d\u003e {\r",
                  "  return_total \u003d response[\"total\"];\r",
                  "  return_items_size_array \u003d response[\"items\"];\r",
                  "  if (return_items_size_array !\u003d null) {\r",
                  "    return_items_size_array \u003d return_items_size_array.length;\r",
                  "  }\r",
                  "  if (return_total !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_total) \u0026\u0026 return_items_size_array !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_items_size_array)) {\r",
                  "    pm.expect(return_total).to.be.at.least(return_items_size_array);\r",
                  "  }\r",
                  "});\r",
                  "response_items \u003d response[\"items\"];\r",
                  "if (response_items !\u003d null) {\r",
                  "  for (response_items_index in response_items) {\r",
                  "    response_items_element \u003d response_items[response_items_index];\r",
                  "    pm.test(\"return.album_type one of { album, compilation, single }\", () \u003d\u003e {\r",
                  "      return_album_type \u003d response_items_element[\"album_type\"];\r",
                  "      if (return_album_type !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_album_type)) {\r",
                  "        pm.expect([\"album\", \"compilation\", \"single\"].includes(return_album_type)).to.be.true;\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"All the elements of return.available_markets[] have LENGTH\\x3d2\", () \u003d\u003e {\r",
                  "      return_available_markets_array \u003d response_items_element[\"available_markets\"];\r",
                  "      if (return_available_markets_array !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_available_markets_array)) {\r",
                  "        pm.expect(return_available_markets_array.every(element \u003d\u003e element.length \u003d\u003d\u003d 2)).to.be.true;\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"LENGTH(return.href)\\x3d\\x3d56\", () \u003d\u003e {\r",
                  "      return_href \u003d response_items_element[\"href\"];\r",
                  "      if (return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href)) {\r",
                  "        pm.expect(return_href).to.have.length(56);\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"return.href is Url\", () \u003d\u003e {\r",
                  "      return_href \u003d response_items_element[\"href\"];\r",
                  "      if (return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href)) {\r",
                  "        pm.expect(return_href).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"LENGTH(return.id)\\x3d\\x3d22\", () \u003d\u003e {\r",
                  "      return_id \u003d response_items_element[\"id\"];\r",
                  "      if (return_id !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_id)) {\r",
                  "        pm.expect(return_id).to.have.length(22);\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"return.type \\x3d\\x3d album\", () \u003d\u003e {\r",
                  "      return_type \u003d response_items_element[\"type\"];\r",
                  "      if (return_type !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_type)) {\r",
                  "        pm.expect([\"album\"].includes(return_type)).to.be.true;\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"LENGTH(return.type)\\x3d\\x3d5\", () \u003d\u003e {\r",
                  "      return_type \u003d response_items_element[\"type\"];\r",
                  "      if (return_type !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_type)) {\r",
                  "        pm.expect(return_type).to.have.length(5);\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"LENGTH(return.uri)\\x3d\\x3d36\", () \u003d\u003e {\r",
                  "      return_uri \u003d response_items_element[\"uri\"];\r",
                  "      if (return_uri !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_uri)) {\r",
                  "        pm.expect(return_uri).to.have.length(36);\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"return.release_date_precision one of { day, month, year }\", () \u003d\u003e {\r",
                  "      return_release_date_precision \u003d response_items_element[\"release_date_precision\"];\r",
                  "      if (return_release_date_precision !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_release_date_precision)) {\r",
                  "        pm.expect([\"day\", \"month\", \"year\"].includes(return_release_date_precision)).to.be.true;\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"return.total_tracks \\x3e\\x3d 1\", () \u003d\u003e {\r",
                  "      return_total_tracks \u003d response_items_element[\"total_tracks\"];\r",
                  "      if (return_total_tracks !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_total_tracks)) {\r",
                  "        pm.expect(return_total_tracks).to.be.at.least(1);\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"size(return.available_markets[]) \\x3e\\x3d 1\", () \u003d\u003e {\r",
                  "      return_available_markets_size_array \u003d response_items_element[\"available_markets\"];\r",
                  "      if (return_available_markets_size_array !\u003d null) {\r",
                  "        return_available_markets_size_array \u003d return_available_markets_size_array.length;\r",
                  "      }\r",
                  "      if (return_available_markets_size_array !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_available_markets_size_array)) {\r",
                  "        pm.expect(return_available_markets_size_array).to.be.at.least(1);\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"size(return.artists[]) \\x3e\\x3d 1\", () \u003d\u003e {\r",
                  "      return_artists_size_array \u003d response_items_element[\"artists\"];\r",
                  "      if (return_artists_size_array !\u003d null) {\r",
                  "        return_artists_size_array \u003d return_artists_size_array.length;\r",
                  "      }\r",
                  "      if (return_artists_size_array !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_artists_size_array)) {\r",
                  "        pm.expect(return_artists_size_array).to.be.at.least(1);\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"return.album_group in input.include_groups[]\", () \u003d\u003e {\r",
                  "      return_album_group \u003d response_items_element[\"album_group\"];\r",
                  "      if (input_include_groups_array !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(input_include_groups_array) \u0026\u0026 return_album_group !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_album_group)) {\r",
                  "        pm.expect(input_include_groups_array.includes(return_album_group)).to.be.true;\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"return.id is a substring of return.href\", () \u003d\u003e {\r",
                  "      return_href \u003d response_items_element[\"href\"];\r",
                  "      return_id \u003d response_items_element[\"id\"];\r",
                  "      if (return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href) \u0026\u0026 return_id !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_id)) {\r",
                  "        pm.expect(return_href.includes(return_id)).to.be.true;\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"return.type is a substring of return.href\", () \u003d\u003e {\r",
                  "      return_href \u003d response_items_element[\"href\"];\r",
                  "      return_type \u003d response_items_element[\"type\"];\r",
                  "      if (return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href) \u0026\u0026 return_type !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_type)) {\r",
                  "        pm.expect(return_href.includes(return_type)).to.be.true;\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"return.id is a substring of return.uri\", () \u003d\u003e {\r",
                  "      return_id \u003d response_items_element[\"id\"];\r",
                  "      return_uri \u003d response_items_element[\"uri\"];\r",
                  "      if (return_id !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_id) \u0026\u0026 return_uri !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_uri)) {\r",
                  "        pm.expect(return_uri.includes(return_id)).to.be.true;\r",
                  "      }\r",
                  "    });\r",
                  "    pm.test(\"return.type is a substring of return.uri\", () \u003d\u003e {\r",
                  "      return_type \u003d response_items_element[\"type\"];\r",
                  "      return_uri \u003d response_items_element[\"uri\"];\r",
                  "      if (return_type !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_type) \u0026\u0026 return_uri !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_uri)) {\r",
                  "        pm.expect(return_uri.includes(return_type)).to.be.true;\r",
                  "      }\r",
                  "    });\r",
                  "    response_items_element_images \u003d response_items_element[\"images\"];\r",
                  "    if (response_items_element_images !\u003d null) {\r",
                  "      for (response_items_element_images_index in response_items_element_images) {\r",
                  "        response_items_element_images_element \u003d response_items_element_images[response_items_element_images_index];\r",
                  "        pm.test(\"return.height \\x3d\\x3d return.width\", () \u003d\u003e {\r",
                  "          return_height \u003d response_items_element_images_element[\"height\"];\r",
                  "          return_width \u003d response_items_element_images_element[\"width\"];\r",
                  "          if (return_height !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_height) \u0026\u0026 return_width !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_width)) {\r",
                  "            pm.expect(return_height).to.eql(return_width);\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"return.height one of { 64, 300, 640 }\", () \u003d\u003e {\r",
                  "          return_height \u003d response_items_element_images_element[\"height\"];\r",
                  "          if (return_height !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_height)) {\r",
                  "            pm.expect([64, 300, 640].includes(return_height)).to.be.true;\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"LENGTH(return.url)\\x3d\\x3d64\", () \u003d\u003e {\r",
                  "          return_url \u003d response_items_element_images_element[\"url\"];\r",
                  "          if (return_url !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_url)) {\r",
                  "            pm.expect(return_url).to.have.length(64);\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"return.url is Url\", () \u003d\u003e {\r",
                  "          return_url \u003d response_items_element_images_element[\"url\"];\r",
                  "          if (return_url !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_url)) {\r",
                  "            pm.expect(return_url).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "          }\r",
                  "        });\r",
                  "      }\r",
                  "    }\r",
                  "    response_items_element_artists \u003d response_items_element[\"artists\"];\r",
                  "    if (response_items_element_artists !\u003d null) {\r",
                  "      for (response_items_element_artists_index in response_items_element_artists) {\r",
                  "        response_items_element_artists_element \u003d response_items_element_artists[response_items_element_artists_index];\r",
                  "        pm.test(\"LENGTH(return.href)\\x3d\\x3d57\", () \u003d\u003e {\r",
                  "          return_href \u003d response_items_element_artists_element[\"href\"];\r",
                  "          if (return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href)) {\r",
                  "            pm.expect(return_href).to.have.length(57);\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"return.href is Url\", () \u003d\u003e {\r",
                  "          return_href \u003d response_items_element_artists_element[\"href\"];\r",
                  "          if (return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href)) {\r",
                  "            pm.expect(return_href).to.match(/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[\\w\\u00a1-\\uffff0-9]+-?)*[\\w\\u00a1-\\uffff0-9]+)(?:\\.(?:[\\w\\u00a1-\\uffff0-9]+-)*[\\w\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/);\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"LENGTH(return.id)\\x3d\\x3d22\", () \u003d\u003e {\r",
                  "          return_id \u003d response_items_element_artists_element[\"id\"];\r",
                  "          if (return_id !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_id)) {\r",
                  "            pm.expect(return_id).to.have.length(22);\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"return.type \\x3d\\x3d artist\", () \u003d\u003e {\r",
                  "          return_type \u003d response_items_element_artists_element[\"type\"];\r",
                  "          if (return_type !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_type)) {\r",
                  "            pm.expect([\"artist\"].includes(return_type)).to.be.true;\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"LENGTH(return.type)\\x3d\\x3d6\", () \u003d\u003e {\r",
                  "          return_type \u003d response_items_element_artists_element[\"type\"];\r",
                  "          if (return_type !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_type)) {\r",
                  "            pm.expect(return_type).to.have.length(6);\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"LENGTH(return.uri)\\x3d\\x3d37\", () \u003d\u003e {\r",
                  "          return_uri \u003d response_items_element_artists_element[\"uri\"];\r",
                  "          if (return_uri !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_uri)) {\r",
                  "            pm.expect(return_uri).to.have.length(37);\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"return.id is a substring of return.href\", () \u003d\u003e {\r",
                  "          return_href \u003d response_items_element_artists_element[\"href\"];\r",
                  "          return_id \u003d response_items_element_artists_element[\"id\"];\r",
                  "          if (return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href) \u0026\u0026 return_id !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_id)) {\r",
                  "            pm.expect(return_href.includes(return_id)).to.be.true;\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"return.type is a substring of return.href\", () \u003d\u003e {\r",
                  "          return_href \u003d response_items_element_artists_element[\"href\"];\r",
                  "          return_type \u003d response_items_element_artists_element[\"type\"];\r",
                  "          if (return_href !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_href) \u0026\u0026 return_type !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_type)) {\r",
                  "            pm.expect(return_href.includes(return_type)).to.be.true;\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"return.id is a substring of return.uri\", () \u003d\u003e {\r",
                  "          return_id \u003d response_items_element_artists_element[\"id\"];\r",
                  "          return_uri \u003d response_items_element_artists_element[\"uri\"];\r",
                  "          if (return_id !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_id) \u0026\u0026 return_uri !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_uri)) {\r",
                  "            pm.expect(return_uri.includes(return_id)).to.be.true;\r",
                  "          }\r",
                  "        });\r",
                  "        pm.test(\"return.type is a substring of return.uri\", () \u003d\u003e {\r",
                  "          return_type \u003d response_items_element_artists_element[\"type\"];\r",
                  "          return_uri \u003d response_items_element_artists_element[\"uri\"];\r",
                  "          if (return_type !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_type) \u0026\u0026 return_uri !\u003d null \u0026\u0026 !valuesToConsiderAsNull.includes(return_uri)) {\r",
                  "            pm.expect(return_uri.includes(return_type)).to.be.true;\r",
                  "          }\r",
                  "        });\r",
                  "      }\r",
                  "    }\r",
                  "  }\r",
                  "}\r",
                  ";\r"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://api.spotify.com/v1/artists/{id}/albums",
              "protocol": "https",
              "host": [
                "api",
                "spotify",
                "com"
              ],
              "path": [
                "v1",
                "artists",
                ":id",
                "albums"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "include_groups",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "market",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "booleanProperty",
                  "value": "",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "body": {}
          },
          "response": [],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ]
    }
  ]
}